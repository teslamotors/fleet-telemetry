// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.3
// source: protos/vehicle_data.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Field int32

const (
	Field_Unknown                                   Field = 0
	Field_DriveRail                                 Field = 1
	Field_ChargeState                               Field = 2
	Field_BmsFullchargecomplete                     Field = 3
	Field_VehicleSpeed                              Field = 4
	Field_Odometer                                  Field = 5
	Field_PackVoltage                               Field = 6
	Field_PackCurrent                               Field = 7
	Field_Soc                                       Field = 8
	Field_DCDCEnable                                Field = 9
	Field_Gear                                      Field = 10
	Field_IsolationResistance                       Field = 11
	Field_PedalPosition                             Field = 12
	Field_BrakePedal                                Field = 13
	Field_DiStateR                                  Field = 14
	Field_DiHeatsinkTR                              Field = 15
	Field_DiAxleSpeedR                              Field = 16
	Field_DiTorquemotor                             Field = 17
	Field_DiStatorTempR                             Field = 18
	Field_DiVBatR                                   Field = 19
	Field_DiMotorCurrentR                           Field = 20
	Field_Location                                  Field = 21
	Field_GpsState                                  Field = 22
	Field_GpsHeading                                Field = 23
	Field_NumBrickVoltageMax                        Field = 24
	Field_BrickVoltageMax                           Field = 25
	Field_NumBrickVoltageMin                        Field = 26
	Field_BrickVoltageMin                           Field = 27
	Field_NumModuleTempMax                          Field = 28
	Field_ModuleTempMax                             Field = 29
	Field_NumModuleTempMin                          Field = 30
	Field_ModuleTempMin                             Field = 31
	Field_RatedRange                                Field = 32
	Field_Hvil                                      Field = 33
	Field_DCChargingEnergyIn                        Field = 34
	Field_DCChargingPower                           Field = 35
	Field_ACChargingEnergyIn                        Field = 36
	Field_ACChargingPower                           Field = 37
	Field_ChargeLimitSoc                            Field = 38
	Field_FastChargerPresent                        Field = 39
	Field_EstBatteryRange                           Field = 40
	Field_IdealBatteryRange                         Field = 41
	Field_BatteryLevel                              Field = 42
	Field_TimeToFullCharge                          Field = 43
	Field_ScheduledChargingStartTime                Field = 44
	Field_ScheduledChargingPending                  Field = 45
	Field_ScheduledDepartureTime                    Field = 46
	Field_PreconditioningEnabled                    Field = 47
	Field_ScheduledChargingMode                     Field = 48
	Field_ChargeAmps                                Field = 49
	Field_ChargeEnableRequest                       Field = 50
	Field_ChargerPhases                             Field = 51
	Field_ChargePortColdWeatherMode                 Field = 52
	Field_ChargeCurrentRequest                      Field = 53
	Field_ChargeCurrentRequestMax                   Field = 54
	Field_BatteryHeaterOn                           Field = 55
	Field_NotEnoughPowerToHeat                      Field = 56
	Field_SuperchargerSessionTripPlanner            Field = 57
	Field_DoorState                                 Field = 58
	Field_Locked                                    Field = 59
	Field_FdWindow                                  Field = 60
	Field_FpWindow                                  Field = 61
	Field_RdWindow                                  Field = 62
	Field_RpWindow                                  Field = 63
	Field_VehicleName                               Field = 64
	Field_SentryMode                                Field = 65
	Field_SpeedLimitMode                            Field = 66
	Field_CurrentLimitMph                           Field = 67
	Field_Version                                   Field = 68
	Field_TpmsPressureFl                            Field = 69
	Field_TpmsPressureFr                            Field = 70
	Field_TpmsPressureRl                            Field = 71
	Field_TpmsPressureRr                            Field = 72
	Field_SemitruckTpmsPressureRe1L0                Field = 73 // Semi-truck only
	Field_SemitruckTpmsPressureRe1L1                Field = 74 // Semi-truck only
	Field_SemitruckTpmsPressureRe1R0                Field = 75 // Semi-truck only
	Field_SemitruckTpmsPressureRe1R1                Field = 76 // Semi-truck only
	Field_SemitruckTpmsPressureRe2L0                Field = 77 // Semi-truck only
	Field_SemitruckTpmsPressureRe2L1                Field = 78 // Semi-truck only
	Field_SemitruckTpmsPressureRe2R0                Field = 79 // Semi-truck only
	Field_SemitruckTpmsPressureRe2R1                Field = 80 // Semi-truck only
	Field_TpmsLastSeenPressureTimeFl                Field = 81
	Field_TpmsLastSeenPressureTimeFr                Field = 82
	Field_TpmsLastSeenPressureTimeRl                Field = 83
	Field_TpmsLastSeenPressureTimeRr                Field = 84
	Field_InsideTemp                                Field = 85
	Field_OutsideTemp                               Field = 86
	Field_SeatHeaterLeft                            Field = 87
	Field_SeatHeaterRight                           Field = 88
	Field_SeatHeaterRearLeft                        Field = 89
	Field_SeatHeaterRearRight                       Field = 90
	Field_SeatHeaterRearCenter                      Field = 91
	Field_AutoSeatClimateLeft                       Field = 92
	Field_AutoSeatClimateRight                      Field = 93
	Field_DriverSeatBelt                            Field = 94
	Field_PassengerSeatBelt                         Field = 95
	Field_DriverSeatOccupied                        Field = 96
	Field_SemitruckPassengerSeatFoldPosition        Field = 97 // Semi-truck only
	Field_LateralAcceleration                       Field = 98
	Field_LongitudinalAcceleration                  Field = 99
	Field_Deprecated_2                              Field = 100
	Field_CruiseSetSpeed                            Field = 101
	Field_LifetimeEnergyUsed                        Field = 102
	Field_LifetimeEnergyUsedDrive                   Field = 103
	Field_SemitruckTractorParkBrakeStatus           Field = 104 // Semi-truck only
	Field_SemitruckTrailerParkBrakeStatus           Field = 105 // Semi-truck only
	Field_BrakePedalPos                             Field = 106
	Field_RouteLastUpdated                          Field = 107
	Field_RouteLine                                 Field = 108
	Field_MilesToArrival                            Field = 109
	Field_MinutesToArrival                          Field = 110
	Field_OriginLocation                            Field = 111
	Field_DestinationLocation                       Field = 112
	Field_CarType                                   Field = 113
	Field_Trim                                      Field = 114
	Field_ExteriorColor                             Field = 115
	Field_RoofColor                                 Field = 116
	Field_ChargePort                                Field = 117
	Field_ChargePortLatch                           Field = 118
	Field_Experimental_1                            Field = 119
	Field_Experimental_2                            Field = 120
	Field_Experimental_3                            Field = 121
	Field_Experimental_4                            Field = 122
	Field_GuestModeEnabled                          Field = 123
	Field_PinToDriveEnabled                         Field = 124
	Field_PairedPhoneKeyAndKeyFobQty                Field = 125
	Field_CruiseFollowDistance                      Field = 126
	Field_AutomaticBlindSpotCamera                  Field = 127
	Field_BlindSpotCollisionWarningChime            Field = 128
	Field_SpeedLimitWarning                         Field = 129
	Field_ForwardCollisionWarning                   Field = 130
	Field_LaneDepartureAvoidance                    Field = 131
	Field_EmergencyLaneDepartureAvoidance           Field = 132
	Field_AutomaticEmergencyBrakingOff              Field = 133
	Field_LifetimeEnergyGainedRegen                 Field = 134
	Field_DiStateF                                  Field = 135
	Field_DiStateREL                                Field = 136
	Field_DiStateRER                                Field = 137
	Field_DiHeatsinkTF                              Field = 138
	Field_DiHeatsinkTREL                            Field = 139
	Field_DiHeatsinkTRER                            Field = 140
	Field_DiAxleSpeedF                              Field = 141
	Field_DiAxleSpeedREL                            Field = 142
	Field_DiAxleSpeedRER                            Field = 143
	Field_DiSlaveTorqueCmd                          Field = 144
	Field_DiTorqueActualR                           Field = 145
	Field_DiTorqueActualF                           Field = 146
	Field_DiTorqueActualREL                         Field = 147
	Field_DiTorqueActualRER                         Field = 148
	Field_DiStatorTempF                             Field = 149
	Field_DiStatorTempREL                           Field = 150
	Field_DiStatorTempRER                           Field = 151
	Field_DiVBatF                                   Field = 152
	Field_DiVBatREL                                 Field = 153
	Field_DiVBatRER                                 Field = 154
	Field_DiMotorCurrentF                           Field = 155
	Field_DiMotorCurrentREL                         Field = 156
	Field_DiMotorCurrentRER                         Field = 157
	Field_EnergyRemaining                           Field = 158
	Field_ServiceMode                               Field = 159
	Field_BMSState                                  Field = 160
	Field_GuestModeMobileAccessState                Field = 161
	Field_Deprecated_1                              Field = 162
	Field_DestinationName                           Field = 163
	Field_DiInverterTR                              Field = 164
	Field_DiInverterTF                              Field = 165
	Field_DiInverterTREL                            Field = 166
	Field_DiInverterTRER                            Field = 167
	Field_Experimental_5                            Field = 168
	Field_Experimental_6                            Field = 169
	Field_Experimental_7                            Field = 170
	Field_Experimental_8                            Field = 171
	Field_Experimental_9                            Field = 172
	Field_Experimental_10                           Field = 173
	Field_Experimental_11                           Field = 174
	Field_Experimental_12                           Field = 175
	Field_Experimental_13                           Field = 176
	Field_Experimental_14                           Field = 177
	Field_Experimental_15                           Field = 178
	Field_DetailedChargeState                       Field = 179
	Field_CabinOverheatProtectionMode               Field = 180
	Field_CabinOverheatProtectionTemperatureLimit   Field = 181
	Field_CenterDisplay                             Field = 182
	Field_ChargePortDoorOpen                        Field = 183
	Field_ChargerVoltage                            Field = 184
	Field_ChargingCableType                         Field = 185
	Field_ClimateKeeperMode                         Field = 186
	Field_DefrostForPreconditioning                 Field = 187
	Field_DefrostMode                               Field = 188
	Field_EfficiencyPackage                         Field = 189
	Field_EstimatedHoursToChargeTermination         Field = 190
	Field_EuropeVehicle                             Field = 191
	Field_ExpectedEnergyPercentAtTripArrival        Field = 192
	Field_FastChargerType                           Field = 193
	Field_HomelinkDeviceCount                       Field = 194
	Field_HomelinkNearby                            Field = 195
	Field_HvacACEnabled                             Field = 196
	Field_HvacAutoMode                              Field = 197
	Field_HvacFanSpeed                              Field = 198
	Field_HvacFanStatus                             Field = 199
	Field_HvacLeftTemperatureRequest                Field = 200
	Field_HvacPower                                 Field = 201
	Field_HvacRightTemperatureRequest               Field = 202
	Field_HvacSteeringWheelHeatAuto                 Field = 203
	Field_HvacSteeringWheelHeatLevel                Field = 204
	Field_OffroadLightbarPresent                    Field = 205
	Field_PowershareHoursLeft                       Field = 206
	Field_PowershareInstantaneousPowerKW            Field = 207
	Field_PowershareStatus                          Field = 208
	Field_PowershareStopReason                      Field = 209
	Field_PowershareType                            Field = 210
	Field_RearDisplayHvacEnabled                    Field = 211
	Field_RearSeatHeaters                           Field = 212
	Field_RemoteStartEnabled                        Field = 213
	Field_RightHandDrive                            Field = 214
	Field_RouteTrafficMinutesDelay                  Field = 215
	Field_SoftwareUpdateDownloadPercentComplete     Field = 216
	Field_SoftwareUpdateExpectedDurationMinutes     Field = 217
	Field_SoftwareUpdateInstallationPercentComplete Field = 218
	Field_SoftwareUpdateScheduledStartTime          Field = 219
	Field_SoftwareUpdateVersion                     Field = 220
	Field_TonneauOpenPercent                        Field = 221
	Field_TonneauPosition                           Field = 222
	Field_TonneauTentMode                           Field = 223
	Field_TpmsHardWarnings                          Field = 224
	Field_TpmsSoftWarnings                          Field = 225
	Field_ValetModeEnabled                          Field = 226
	Field_WheelType                                 Field = 227
	Field_WiperHeatEnabled                          Field = 228
	Field_LocatedAtHome                             Field = 229
	Field_LocatedAtWork                             Field = 230
	Field_LocatedAtFavorite                         Field = 231
	Field_SettingDistanceUnit                       Field = 232
	Field_SettingTemperatureUnit                    Field = 233
	Field_Setting24HourTime                         Field = 234
	Field_SettingTirePressureUnit                   Field = 235
	Field_SettingChargeUnit                         Field = 236
	Field_ClimateSeatCoolingFrontLeft               Field = 237
	Field_ClimateSeatCoolingFrontRight              Field = 238
)

// Enum value maps for Field.
var (
	Field_name = map[int32]string{
		0:   "Unknown",
		1:   "DriveRail",
		2:   "ChargeState",
		3:   "BmsFullchargecomplete",
		4:   "VehicleSpeed",
		5:   "Odometer",
		6:   "PackVoltage",
		7:   "PackCurrent",
		8:   "Soc",
		9:   "DCDCEnable",
		10:  "Gear",
		11:  "IsolationResistance",
		12:  "PedalPosition",
		13:  "BrakePedal",
		14:  "DiStateR",
		15:  "DiHeatsinkTR",
		16:  "DiAxleSpeedR",
		17:  "DiTorquemotor",
		18:  "DiStatorTempR",
		19:  "DiVBatR",
		20:  "DiMotorCurrentR",
		21:  "Location",
		22:  "GpsState",
		23:  "GpsHeading",
		24:  "NumBrickVoltageMax",
		25:  "BrickVoltageMax",
		26:  "NumBrickVoltageMin",
		27:  "BrickVoltageMin",
		28:  "NumModuleTempMax",
		29:  "ModuleTempMax",
		30:  "NumModuleTempMin",
		31:  "ModuleTempMin",
		32:  "RatedRange",
		33:  "Hvil",
		34:  "DCChargingEnergyIn",
		35:  "DCChargingPower",
		36:  "ACChargingEnergyIn",
		37:  "ACChargingPower",
		38:  "ChargeLimitSoc",
		39:  "FastChargerPresent",
		40:  "EstBatteryRange",
		41:  "IdealBatteryRange",
		42:  "BatteryLevel",
		43:  "TimeToFullCharge",
		44:  "ScheduledChargingStartTime",
		45:  "ScheduledChargingPending",
		46:  "ScheduledDepartureTime",
		47:  "PreconditioningEnabled",
		48:  "ScheduledChargingMode",
		49:  "ChargeAmps",
		50:  "ChargeEnableRequest",
		51:  "ChargerPhases",
		52:  "ChargePortColdWeatherMode",
		53:  "ChargeCurrentRequest",
		54:  "ChargeCurrentRequestMax",
		55:  "BatteryHeaterOn",
		56:  "NotEnoughPowerToHeat",
		57:  "SuperchargerSessionTripPlanner",
		58:  "DoorState",
		59:  "Locked",
		60:  "FdWindow",
		61:  "FpWindow",
		62:  "RdWindow",
		63:  "RpWindow",
		64:  "VehicleName",
		65:  "SentryMode",
		66:  "SpeedLimitMode",
		67:  "CurrentLimitMph",
		68:  "Version",
		69:  "TpmsPressureFl",
		70:  "TpmsPressureFr",
		71:  "TpmsPressureRl",
		72:  "TpmsPressureRr",
		73:  "SemitruckTpmsPressureRe1L0",
		74:  "SemitruckTpmsPressureRe1L1",
		75:  "SemitruckTpmsPressureRe1R0",
		76:  "SemitruckTpmsPressureRe1R1",
		77:  "SemitruckTpmsPressureRe2L0",
		78:  "SemitruckTpmsPressureRe2L1",
		79:  "SemitruckTpmsPressureRe2R0",
		80:  "SemitruckTpmsPressureRe2R1",
		81:  "TpmsLastSeenPressureTimeFl",
		82:  "TpmsLastSeenPressureTimeFr",
		83:  "TpmsLastSeenPressureTimeRl",
		84:  "TpmsLastSeenPressureTimeRr",
		85:  "InsideTemp",
		86:  "OutsideTemp",
		87:  "SeatHeaterLeft",
		88:  "SeatHeaterRight",
		89:  "SeatHeaterRearLeft",
		90:  "SeatHeaterRearRight",
		91:  "SeatHeaterRearCenter",
		92:  "AutoSeatClimateLeft",
		93:  "AutoSeatClimateRight",
		94:  "DriverSeatBelt",
		95:  "PassengerSeatBelt",
		96:  "DriverSeatOccupied",
		97:  "SemitruckPassengerSeatFoldPosition",
		98:  "LateralAcceleration",
		99:  "LongitudinalAcceleration",
		100: "Deprecated_2",
		101: "CruiseSetSpeed",
		102: "LifetimeEnergyUsed",
		103: "LifetimeEnergyUsedDrive",
		104: "SemitruckTractorParkBrakeStatus",
		105: "SemitruckTrailerParkBrakeStatus",
		106: "BrakePedalPos",
		107: "RouteLastUpdated",
		108: "RouteLine",
		109: "MilesToArrival",
		110: "MinutesToArrival",
		111: "OriginLocation",
		112: "DestinationLocation",
		113: "CarType",
		114: "Trim",
		115: "ExteriorColor",
		116: "RoofColor",
		117: "ChargePort",
		118: "ChargePortLatch",
		119: "Experimental_1",
		120: "Experimental_2",
		121: "Experimental_3",
		122: "Experimental_4",
		123: "GuestModeEnabled",
		124: "PinToDriveEnabled",
		125: "PairedPhoneKeyAndKeyFobQty",
		126: "CruiseFollowDistance",
		127: "AutomaticBlindSpotCamera",
		128: "BlindSpotCollisionWarningChime",
		129: "SpeedLimitWarning",
		130: "ForwardCollisionWarning",
		131: "LaneDepartureAvoidance",
		132: "EmergencyLaneDepartureAvoidance",
		133: "AutomaticEmergencyBrakingOff",
		134: "LifetimeEnergyGainedRegen",
		135: "DiStateF",
		136: "DiStateREL",
		137: "DiStateRER",
		138: "DiHeatsinkTF",
		139: "DiHeatsinkTREL",
		140: "DiHeatsinkTRER",
		141: "DiAxleSpeedF",
		142: "DiAxleSpeedREL",
		143: "DiAxleSpeedRER",
		144: "DiSlaveTorqueCmd",
		145: "DiTorqueActualR",
		146: "DiTorqueActualF",
		147: "DiTorqueActualREL",
		148: "DiTorqueActualRER",
		149: "DiStatorTempF",
		150: "DiStatorTempREL",
		151: "DiStatorTempRER",
		152: "DiVBatF",
		153: "DiVBatREL",
		154: "DiVBatRER",
		155: "DiMotorCurrentF",
		156: "DiMotorCurrentREL",
		157: "DiMotorCurrentRER",
		158: "EnergyRemaining",
		159: "ServiceMode",
		160: "BMSState",
		161: "GuestModeMobileAccessState",
		162: "Deprecated_1",
		163: "DestinationName",
		164: "DiInverterTR",
		165: "DiInverterTF",
		166: "DiInverterTREL",
		167: "DiInverterTRER",
		168: "Experimental_5",
		169: "Experimental_6",
		170: "Experimental_7",
		171: "Experimental_8",
		172: "Experimental_9",
		173: "Experimental_10",
		174: "Experimental_11",
		175: "Experimental_12",
		176: "Experimental_13",
		177: "Experimental_14",
		178: "Experimental_15",
		179: "DetailedChargeState",
		180: "CabinOverheatProtectionMode",
		181: "CabinOverheatProtectionTemperatureLimit",
		182: "CenterDisplay",
		183: "ChargePortDoorOpen",
		184: "ChargerVoltage",
		185: "ChargingCableType",
		186: "ClimateKeeperMode",
		187: "DefrostForPreconditioning",
		188: "DefrostMode",
		189: "EfficiencyPackage",
		190: "EstimatedHoursToChargeTermination",
		191: "EuropeVehicle",
		192: "ExpectedEnergyPercentAtTripArrival",
		193: "FastChargerType",
		194: "HomelinkDeviceCount",
		195: "HomelinkNearby",
		196: "HvacACEnabled",
		197: "HvacAutoMode",
		198: "HvacFanSpeed",
		199: "HvacFanStatus",
		200: "HvacLeftTemperatureRequest",
		201: "HvacPower",
		202: "HvacRightTemperatureRequest",
		203: "HvacSteeringWheelHeatAuto",
		204: "HvacSteeringWheelHeatLevel",
		205: "OffroadLightbarPresent",
		206: "PowershareHoursLeft",
		207: "PowershareInstantaneousPowerKW",
		208: "PowershareStatus",
		209: "PowershareStopReason",
		210: "PowershareType",
		211: "RearDisplayHvacEnabled",
		212: "RearSeatHeaters",
		213: "RemoteStartEnabled",
		214: "RightHandDrive",
		215: "RouteTrafficMinutesDelay",
		216: "SoftwareUpdateDownloadPercentComplete",
		217: "SoftwareUpdateExpectedDurationMinutes",
		218: "SoftwareUpdateInstallationPercentComplete",
		219: "SoftwareUpdateScheduledStartTime",
		220: "SoftwareUpdateVersion",
		221: "TonneauOpenPercent",
		222: "TonneauPosition",
		223: "TonneauTentMode",
		224: "TpmsHardWarnings",
		225: "TpmsSoftWarnings",
		226: "ValetModeEnabled",
		227: "WheelType",
		228: "WiperHeatEnabled",
		229: "LocatedAtHome",
		230: "LocatedAtWork",
		231: "LocatedAtFavorite",
		232: "SettingDistanceUnit",
		233: "SettingTemperatureUnit",
		234: "Setting24HourTime",
		235: "SettingTirePressureUnit",
		236: "SettingChargeUnit",
		237: "ClimateSeatCoolingFrontLeft",
		238: "ClimateSeatCoolingFrontRight",
	}
	Field_value = map[string]int32{
		"Unknown":                                   0,
		"DriveRail":                                 1,
		"ChargeState":                               2,
		"BmsFullchargecomplete":                     3,
		"VehicleSpeed":                              4,
		"Odometer":                                  5,
		"PackVoltage":                               6,
		"PackCurrent":                               7,
		"Soc":                                       8,
		"DCDCEnable":                                9,
		"Gear":                                      10,
		"IsolationResistance":                       11,
		"PedalPosition":                             12,
		"BrakePedal":                                13,
		"DiStateR":                                  14,
		"DiHeatsinkTR":                              15,
		"DiAxleSpeedR":                              16,
		"DiTorquemotor":                             17,
		"DiStatorTempR":                             18,
		"DiVBatR":                                   19,
		"DiMotorCurrentR":                           20,
		"Location":                                  21,
		"GpsState":                                  22,
		"GpsHeading":                                23,
		"NumBrickVoltageMax":                        24,
		"BrickVoltageMax":                           25,
		"NumBrickVoltageMin":                        26,
		"BrickVoltageMin":                           27,
		"NumModuleTempMax":                          28,
		"ModuleTempMax":                             29,
		"NumModuleTempMin":                          30,
		"ModuleTempMin":                             31,
		"RatedRange":                                32,
		"Hvil":                                      33,
		"DCChargingEnergyIn":                        34,
		"DCChargingPower":                           35,
		"ACChargingEnergyIn":                        36,
		"ACChargingPower":                           37,
		"ChargeLimitSoc":                            38,
		"FastChargerPresent":                        39,
		"EstBatteryRange":                           40,
		"IdealBatteryRange":                         41,
		"BatteryLevel":                              42,
		"TimeToFullCharge":                          43,
		"ScheduledChargingStartTime":                44,
		"ScheduledChargingPending":                  45,
		"ScheduledDepartureTime":                    46,
		"PreconditioningEnabled":                    47,
		"ScheduledChargingMode":                     48,
		"ChargeAmps":                                49,
		"ChargeEnableRequest":                       50,
		"ChargerPhases":                             51,
		"ChargePortColdWeatherMode":                 52,
		"ChargeCurrentRequest":                      53,
		"ChargeCurrentRequestMax":                   54,
		"BatteryHeaterOn":                           55,
		"NotEnoughPowerToHeat":                      56,
		"SuperchargerSessionTripPlanner":            57,
		"DoorState":                                 58,
		"Locked":                                    59,
		"FdWindow":                                  60,
		"FpWindow":                                  61,
		"RdWindow":                                  62,
		"RpWindow":                                  63,
		"VehicleName":                               64,
		"SentryMode":                                65,
		"SpeedLimitMode":                            66,
		"CurrentLimitMph":                           67,
		"Version":                                   68,
		"TpmsPressureFl":                            69,
		"TpmsPressureFr":                            70,
		"TpmsPressureRl":                            71,
		"TpmsPressureRr":                            72,
		"SemitruckTpmsPressureRe1L0":                73,
		"SemitruckTpmsPressureRe1L1":                74,
		"SemitruckTpmsPressureRe1R0":                75,
		"SemitruckTpmsPressureRe1R1":                76,
		"SemitruckTpmsPressureRe2L0":                77,
		"SemitruckTpmsPressureRe2L1":                78,
		"SemitruckTpmsPressureRe2R0":                79,
		"SemitruckTpmsPressureRe2R1":                80,
		"TpmsLastSeenPressureTimeFl":                81,
		"TpmsLastSeenPressureTimeFr":                82,
		"TpmsLastSeenPressureTimeRl":                83,
		"TpmsLastSeenPressureTimeRr":                84,
		"InsideTemp":                                85,
		"OutsideTemp":                               86,
		"SeatHeaterLeft":                            87,
		"SeatHeaterRight":                           88,
		"SeatHeaterRearLeft":                        89,
		"SeatHeaterRearRight":                       90,
		"SeatHeaterRearCenter":                      91,
		"AutoSeatClimateLeft":                       92,
		"AutoSeatClimateRight":                      93,
		"DriverSeatBelt":                            94,
		"PassengerSeatBelt":                         95,
		"DriverSeatOccupied":                        96,
		"SemitruckPassengerSeatFoldPosition":        97,
		"LateralAcceleration":                       98,
		"LongitudinalAcceleration":                  99,
		"Deprecated_2":                              100,
		"CruiseSetSpeed":                            101,
		"LifetimeEnergyUsed":                        102,
		"LifetimeEnergyUsedDrive":                   103,
		"SemitruckTractorParkBrakeStatus":           104,
		"SemitruckTrailerParkBrakeStatus":           105,
		"BrakePedalPos":                             106,
		"RouteLastUpdated":                          107,
		"RouteLine":                                 108,
		"MilesToArrival":                            109,
		"MinutesToArrival":                          110,
		"OriginLocation":                            111,
		"DestinationLocation":                       112,
		"CarType":                                   113,
		"Trim":                                      114,
		"ExteriorColor":                             115,
		"RoofColor":                                 116,
		"ChargePort":                                117,
		"ChargePortLatch":                           118,
		"Experimental_1":                            119,
		"Experimental_2":                            120,
		"Experimental_3":                            121,
		"Experimental_4":                            122,
		"GuestModeEnabled":                          123,
		"PinToDriveEnabled":                         124,
		"PairedPhoneKeyAndKeyFobQty":                125,
		"CruiseFollowDistance":                      126,
		"AutomaticBlindSpotCamera":                  127,
		"BlindSpotCollisionWarningChime":            128,
		"SpeedLimitWarning":                         129,
		"ForwardCollisionWarning":                   130,
		"LaneDepartureAvoidance":                    131,
		"EmergencyLaneDepartureAvoidance":           132,
		"AutomaticEmergencyBrakingOff":              133,
		"LifetimeEnergyGainedRegen":                 134,
		"DiStateF":                                  135,
		"DiStateREL":                                136,
		"DiStateRER":                                137,
		"DiHeatsinkTF":                              138,
		"DiHeatsinkTREL":                            139,
		"DiHeatsinkTRER":                            140,
		"DiAxleSpeedF":                              141,
		"DiAxleSpeedREL":                            142,
		"DiAxleSpeedRER":                            143,
		"DiSlaveTorqueCmd":                          144,
		"DiTorqueActualR":                           145,
		"DiTorqueActualF":                           146,
		"DiTorqueActualREL":                         147,
		"DiTorqueActualRER":                         148,
		"DiStatorTempF":                             149,
		"DiStatorTempREL":                           150,
		"DiStatorTempRER":                           151,
		"DiVBatF":                                   152,
		"DiVBatREL":                                 153,
		"DiVBatRER":                                 154,
		"DiMotorCurrentF":                           155,
		"DiMotorCurrentREL":                         156,
		"DiMotorCurrentRER":                         157,
		"EnergyRemaining":                           158,
		"ServiceMode":                               159,
		"BMSState":                                  160,
		"GuestModeMobileAccessState":                161,
		"Deprecated_1":                              162,
		"DestinationName":                           163,
		"DiInverterTR":                              164,
		"DiInverterTF":                              165,
		"DiInverterTREL":                            166,
		"DiInverterTRER":                            167,
		"Experimental_5":                            168,
		"Experimental_6":                            169,
		"Experimental_7":                            170,
		"Experimental_8":                            171,
		"Experimental_9":                            172,
		"Experimental_10":                           173,
		"Experimental_11":                           174,
		"Experimental_12":                           175,
		"Experimental_13":                           176,
		"Experimental_14":                           177,
		"Experimental_15":                           178,
		"DetailedChargeState":                       179,
		"CabinOverheatProtectionMode":               180,
		"CabinOverheatProtectionTemperatureLimit":   181,
		"CenterDisplay":                             182,
		"ChargePortDoorOpen":                        183,
		"ChargerVoltage":                            184,
		"ChargingCableType":                         185,
		"ClimateKeeperMode":                         186,
		"DefrostForPreconditioning":                 187,
		"DefrostMode":                               188,
		"EfficiencyPackage":                         189,
		"EstimatedHoursToChargeTermination":         190,
		"EuropeVehicle":                             191,
		"ExpectedEnergyPercentAtTripArrival":        192,
		"FastChargerType":                           193,
		"HomelinkDeviceCount":                       194,
		"HomelinkNearby":                            195,
		"HvacACEnabled":                             196,
		"HvacAutoMode":                              197,
		"HvacFanSpeed":                              198,
		"HvacFanStatus":                             199,
		"HvacLeftTemperatureRequest":                200,
		"HvacPower":                                 201,
		"HvacRightTemperatureRequest":               202,
		"HvacSteeringWheelHeatAuto":                 203,
		"HvacSteeringWheelHeatLevel":                204,
		"OffroadLightbarPresent":                    205,
		"PowershareHoursLeft":                       206,
		"PowershareInstantaneousPowerKW":            207,
		"PowershareStatus":                          208,
		"PowershareStopReason":                      209,
		"PowershareType":                            210,
		"RearDisplayHvacEnabled":                    211,
		"RearSeatHeaters":                           212,
		"RemoteStartEnabled":                        213,
		"RightHandDrive":                            214,
		"RouteTrafficMinutesDelay":                  215,
		"SoftwareUpdateDownloadPercentComplete":     216,
		"SoftwareUpdateExpectedDurationMinutes":     217,
		"SoftwareUpdateInstallationPercentComplete": 218,
		"SoftwareUpdateScheduledStartTime":          219,
		"SoftwareUpdateVersion":                     220,
		"TonneauOpenPercent":                        221,
		"TonneauPosition":                           222,
		"TonneauTentMode":                           223,
		"TpmsHardWarnings":                          224,
		"TpmsSoftWarnings":                          225,
		"ValetModeEnabled":                          226,
		"WheelType":                                 227,
		"WiperHeatEnabled":                          228,
		"LocatedAtHome":                             229,
		"LocatedAtWork":                             230,
		"LocatedAtFavorite":                         231,
		"SettingDistanceUnit":                       232,
		"SettingTemperatureUnit":                    233,
		"Setting24HourTime":                         234,
		"SettingTirePressureUnit":                   235,
		"SettingChargeUnit":                         236,
		"ClimateSeatCoolingFrontLeft":               237,
		"ClimateSeatCoolingFrontRight":              238,
	}
)

func (x Field) Enum() *Field {
	p := new(Field)
	*p = x
	return p
}

func (x Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[0].Descriptor()
}

func (Field) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[0]
}

func (x Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field.Descriptor instead.
func (Field) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{0}
}

// ChargingState is deprecated and not used
type ChargingState int32

const (
	ChargingState_ChargeStateUnknown      ChargingState = 0
	ChargingState_ChargeStateDisconnected ChargingState = 1
	ChargingState_ChargeStateNoPower      ChargingState = 2
	ChargingState_ChargeStateStarting     ChargingState = 3
	ChargingState_ChargeStateCharging     ChargingState = 4
	ChargingState_ChargeStateComplete     ChargingState = 5
	ChargingState_ChargeStateStopped      ChargingState = 6
)

// Enum value maps for ChargingState.
var (
	ChargingState_name = map[int32]string{
		0: "ChargeStateUnknown",
		1: "ChargeStateDisconnected",
		2: "ChargeStateNoPower",
		3: "ChargeStateStarting",
		4: "ChargeStateCharging",
		5: "ChargeStateComplete",
		6: "ChargeStateStopped",
	}
	ChargingState_value = map[string]int32{
		"ChargeStateUnknown":      0,
		"ChargeStateDisconnected": 1,
		"ChargeStateNoPower":      2,
		"ChargeStateStarting":     3,
		"ChargeStateCharging":     4,
		"ChargeStateComplete":     5,
		"ChargeStateStopped":      6,
	}
)

func (x ChargingState) Enum() *ChargingState {
	p := new(ChargingState)
	*p = x
	return p
}

func (x ChargingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[1].Descriptor()
}

func (ChargingState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[1]
}

func (x ChargingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingState.Descriptor instead.
func (ChargingState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{1}
}

type DetailedChargeStateValue int32

const (
	DetailedChargeStateValue_DetailedChargeStateUnknown      DetailedChargeStateValue = 0
	DetailedChargeStateValue_DetailedChargeStateDisconnected DetailedChargeStateValue = 1
	DetailedChargeStateValue_DetailedChargeStateNoPower      DetailedChargeStateValue = 2
	DetailedChargeStateValue_DetailedChargeStateStarting     DetailedChargeStateValue = 3
	DetailedChargeStateValue_DetailedChargeStateCharging     DetailedChargeStateValue = 4
	DetailedChargeStateValue_DetailedChargeStateComplete     DetailedChargeStateValue = 5
	DetailedChargeStateValue_DetailedChargeStateStopped      DetailedChargeStateValue = 6
)

// Enum value maps for DetailedChargeStateValue.
var (
	DetailedChargeStateValue_name = map[int32]string{
		0: "DetailedChargeStateUnknown",
		1: "DetailedChargeStateDisconnected",
		2: "DetailedChargeStateNoPower",
		3: "DetailedChargeStateStarting",
		4: "DetailedChargeStateCharging",
		5: "DetailedChargeStateComplete",
		6: "DetailedChargeStateStopped",
	}
	DetailedChargeStateValue_value = map[string]int32{
		"DetailedChargeStateUnknown":      0,
		"DetailedChargeStateDisconnected": 1,
		"DetailedChargeStateNoPower":      2,
		"DetailedChargeStateStarting":     3,
		"DetailedChargeStateCharging":     4,
		"DetailedChargeStateComplete":     5,
		"DetailedChargeStateStopped":      6,
	}
)

func (x DetailedChargeStateValue) Enum() *DetailedChargeStateValue {
	p := new(DetailedChargeStateValue)
	*p = x
	return p
}

func (x DetailedChargeStateValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetailedChargeStateValue) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[2].Descriptor()
}

func (DetailedChargeStateValue) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[2]
}

func (x DetailedChargeStateValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetailedChargeStateValue.Descriptor instead.
func (DetailedChargeStateValue) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{2}
}

// ShiftState are the gear options
type ShiftState int32

const (
	ShiftState_ShiftStateUnknown ShiftState = 0
	ShiftState_ShiftStateInvalid ShiftState = 1
	ShiftState_ShiftStateP       ShiftState = 2
	ShiftState_ShiftStateR       ShiftState = 3
	ShiftState_ShiftStateN       ShiftState = 4
	ShiftState_ShiftStateD       ShiftState = 5
	ShiftState_ShiftStateSNA     ShiftState = 6
)

// Enum value maps for ShiftState.
var (
	ShiftState_name = map[int32]string{
		0: "ShiftStateUnknown",
		1: "ShiftStateInvalid",
		2: "ShiftStateP",
		3: "ShiftStateR",
		4: "ShiftStateN",
		5: "ShiftStateD",
		6: "ShiftStateSNA",
	}
	ShiftState_value = map[string]int32{
		"ShiftStateUnknown": 0,
		"ShiftStateInvalid": 1,
		"ShiftStateP":       2,
		"ShiftStateR":       3,
		"ShiftStateN":       4,
		"ShiftStateD":       5,
		"ShiftStateSNA":     6,
	}
)

func (x ShiftState) Enum() *ShiftState {
	p := new(ShiftState)
	*p = x
	return p
}

func (x ShiftState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShiftState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[3].Descriptor()
}

func (ShiftState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[3]
}

func (x ShiftState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShiftState.Descriptor instead.
func (ShiftState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{3}
}

type FollowDistance int32

const (
	FollowDistance_FollowDistanceUnknown FollowDistance = 0
	FollowDistance_FollowDistance1       FollowDistance = 1
	FollowDistance_FollowDistance2       FollowDistance = 2
	FollowDistance_FollowDistance3       FollowDistance = 3
	FollowDistance_FollowDistance4       FollowDistance = 4
	FollowDistance_FollowDistance5       FollowDistance = 5
	FollowDistance_FollowDistance6       FollowDistance = 6
	FollowDistance_FollowDistance7       FollowDistance = 7
)

// Enum value maps for FollowDistance.
var (
	FollowDistance_name = map[int32]string{
		0: "FollowDistanceUnknown",
		1: "FollowDistance1",
		2: "FollowDistance2",
		3: "FollowDistance3",
		4: "FollowDistance4",
		5: "FollowDistance5",
		6: "FollowDistance6",
		7: "FollowDistance7",
	}
	FollowDistance_value = map[string]int32{
		"FollowDistanceUnknown": 0,
		"FollowDistance1":       1,
		"FollowDistance2":       2,
		"FollowDistance3":       3,
		"FollowDistance4":       4,
		"FollowDistance5":       5,
		"FollowDistance6":       6,
		"FollowDistance7":       7,
	}
)

func (x FollowDistance) Enum() *FollowDistance {
	p := new(FollowDistance)
	*p = x
	return p
}

func (x FollowDistance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FollowDistance) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[4].Descriptor()
}

func (FollowDistance) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[4]
}

func (x FollowDistance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FollowDistance.Descriptor instead.
func (FollowDistance) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{4}
}

type ForwardCollisionSensitivity int32

const (
	ForwardCollisionSensitivity_ForwardCollisionSensitivityUnknown ForwardCollisionSensitivity = 0
	ForwardCollisionSensitivity_ForwardCollisionSensitivityOff     ForwardCollisionSensitivity = 1
	ForwardCollisionSensitivity_ForwardCollisionSensitivityLate    ForwardCollisionSensitivity = 2
	ForwardCollisionSensitivity_ForwardCollisionSensitivityAverage ForwardCollisionSensitivity = 3
	ForwardCollisionSensitivity_ForwardCollisionSensitivityEarly   ForwardCollisionSensitivity = 4
)

// Enum value maps for ForwardCollisionSensitivity.
var (
	ForwardCollisionSensitivity_name = map[int32]string{
		0: "ForwardCollisionSensitivityUnknown",
		1: "ForwardCollisionSensitivityOff",
		2: "ForwardCollisionSensitivityLate",
		3: "ForwardCollisionSensitivityAverage",
		4: "ForwardCollisionSensitivityEarly",
	}
	ForwardCollisionSensitivity_value = map[string]int32{
		"ForwardCollisionSensitivityUnknown": 0,
		"ForwardCollisionSensitivityOff":     1,
		"ForwardCollisionSensitivityLate":    2,
		"ForwardCollisionSensitivityAverage": 3,
		"ForwardCollisionSensitivityEarly":   4,
	}
)

func (x ForwardCollisionSensitivity) Enum() *ForwardCollisionSensitivity {
	p := new(ForwardCollisionSensitivity)
	*p = x
	return p
}

func (x ForwardCollisionSensitivity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForwardCollisionSensitivity) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[5].Descriptor()
}

func (ForwardCollisionSensitivity) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[5]
}

func (x ForwardCollisionSensitivity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForwardCollisionSensitivity.Descriptor instead.
func (ForwardCollisionSensitivity) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{5}
}

type GuestModeMobileAccess int32

const (
	GuestModeMobileAccess_GuestModeMobileAccessUnknown                      GuestModeMobileAccess = 0
	GuestModeMobileAccess_GuestModeMobileAccessInit                         GuestModeMobileAccess = 1
	GuestModeMobileAccess_GuestModeMobileAccessNotAuthenticated             GuestModeMobileAccess = 2
	GuestModeMobileAccess_GuestModeMobileAccessAuthenticated                GuestModeMobileAccess = 3
	GuestModeMobileAccess_GuestModeMobileAccessAbortedDriving               GuestModeMobileAccess = 4
	GuestModeMobileAccess_GuestModeMobileAccessAbortedUsingRemoteStart      GuestModeMobileAccess = 5
	GuestModeMobileAccess_GuestModeMobileAccessAbortedUsingBLEKeys          GuestModeMobileAccess = 6
	GuestModeMobileAccess_GuestModeMobileAccessAbortedValetMode             GuestModeMobileAccess = 7
	GuestModeMobileAccess_GuestModeMobileAccessAbortedGuestModeOff          GuestModeMobileAccess = 8
	GuestModeMobileAccess_GuestModeMobileAccessAbortedDriveAuthTimeExceeded GuestModeMobileAccess = 9
	GuestModeMobileAccess_GuestModeMobileAccessAbortedNoDataReceived        GuestModeMobileAccess = 10
	GuestModeMobileAccess_GuestModeMobileAccessRequestingFromMothership     GuestModeMobileAccess = 11
	GuestModeMobileAccess_GuestModeMobileAccessRequestingFromAuthD          GuestModeMobileAccess = 12
	GuestModeMobileAccess_GuestModeMobileAccessAbortedFetchFailed           GuestModeMobileAccess = 13
	GuestModeMobileAccess_GuestModeMobileAccessAbortedBadDataReceived       GuestModeMobileAccess = 14
	GuestModeMobileAccess_GuestModeMobileAccessShowingQRCode                GuestModeMobileAccess = 15
	GuestModeMobileAccess_GuestModeMobileAccessSwipedAway                   GuestModeMobileAccess = 16
	GuestModeMobileAccess_GuestModeMobileAccessDismissedQRCodeExpired       GuestModeMobileAccess = 17
	GuestModeMobileAccess_GuestModeMobileAccessSucceededPairedNewBLEKey     GuestModeMobileAccess = 18
)

// Enum value maps for GuestModeMobileAccess.
var (
	GuestModeMobileAccess_name = map[int32]string{
		0:  "GuestModeMobileAccessUnknown",
		1:  "GuestModeMobileAccessInit",
		2:  "GuestModeMobileAccessNotAuthenticated",
		3:  "GuestModeMobileAccessAuthenticated",
		4:  "GuestModeMobileAccessAbortedDriving",
		5:  "GuestModeMobileAccessAbortedUsingRemoteStart",
		6:  "GuestModeMobileAccessAbortedUsingBLEKeys",
		7:  "GuestModeMobileAccessAbortedValetMode",
		8:  "GuestModeMobileAccessAbortedGuestModeOff",
		9:  "GuestModeMobileAccessAbortedDriveAuthTimeExceeded",
		10: "GuestModeMobileAccessAbortedNoDataReceived",
		11: "GuestModeMobileAccessRequestingFromMothership",
		12: "GuestModeMobileAccessRequestingFromAuthD",
		13: "GuestModeMobileAccessAbortedFetchFailed",
		14: "GuestModeMobileAccessAbortedBadDataReceived",
		15: "GuestModeMobileAccessShowingQRCode",
		16: "GuestModeMobileAccessSwipedAway",
		17: "GuestModeMobileAccessDismissedQRCodeExpired",
		18: "GuestModeMobileAccessSucceededPairedNewBLEKey",
	}
	GuestModeMobileAccess_value = map[string]int32{
		"GuestModeMobileAccessUnknown":                      0,
		"GuestModeMobileAccessInit":                         1,
		"GuestModeMobileAccessNotAuthenticated":             2,
		"GuestModeMobileAccessAuthenticated":                3,
		"GuestModeMobileAccessAbortedDriving":               4,
		"GuestModeMobileAccessAbortedUsingRemoteStart":      5,
		"GuestModeMobileAccessAbortedUsingBLEKeys":          6,
		"GuestModeMobileAccessAbortedValetMode":             7,
		"GuestModeMobileAccessAbortedGuestModeOff":          8,
		"GuestModeMobileAccessAbortedDriveAuthTimeExceeded": 9,
		"GuestModeMobileAccessAbortedNoDataReceived":        10,
		"GuestModeMobileAccessRequestingFromMothership":     11,
		"GuestModeMobileAccessRequestingFromAuthD":          12,
		"GuestModeMobileAccessAbortedFetchFailed":           13,
		"GuestModeMobileAccessAbortedBadDataReceived":       14,
		"GuestModeMobileAccessShowingQRCode":                15,
		"GuestModeMobileAccessSwipedAway":                   16,
		"GuestModeMobileAccessDismissedQRCodeExpired":       17,
		"GuestModeMobileAccessSucceededPairedNewBLEKey":     18,
	}
)

func (x GuestModeMobileAccess) Enum() *GuestModeMobileAccess {
	p := new(GuestModeMobileAccess)
	*p = x
	return p
}

func (x GuestModeMobileAccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuestModeMobileAccess) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[6].Descriptor()
}

func (GuestModeMobileAccess) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[6]
}

func (x GuestModeMobileAccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuestModeMobileAccess.Descriptor instead.
func (GuestModeMobileAccess) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{6}
}

type LaneAssistLevel int32

const (
	LaneAssistLevel_LaneAssistLevelUnknown LaneAssistLevel = 0
	LaneAssistLevel_LaneAssistLevelNone    LaneAssistLevel = 1
	LaneAssistLevel_LaneAssistLevelWarning LaneAssistLevel = 2
	LaneAssistLevel_LaneAssistLevelAssist  LaneAssistLevel = 3
)

// Enum value maps for LaneAssistLevel.
var (
	LaneAssistLevel_name = map[int32]string{
		0: "LaneAssistLevelUnknown",
		1: "LaneAssistLevelNone",
		2: "LaneAssistLevelWarning",
		3: "LaneAssistLevelAssist",
	}
	LaneAssistLevel_value = map[string]int32{
		"LaneAssistLevelUnknown": 0,
		"LaneAssistLevelNone":    1,
		"LaneAssistLevelWarning": 2,
		"LaneAssistLevelAssist":  3,
	}
)

func (x LaneAssistLevel) Enum() *LaneAssistLevel {
	p := new(LaneAssistLevel)
	*p = x
	return p
}

func (x LaneAssistLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneAssistLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[7].Descriptor()
}

func (LaneAssistLevel) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[7]
}

func (x LaneAssistLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaneAssistLevel.Descriptor instead.
func (LaneAssistLevel) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{7}
}

type ScheduledChargingModeValue int32

const (
	ScheduledChargingModeValue_ScheduledChargingModeUnknown  ScheduledChargingModeValue = 0
	ScheduledChargingModeValue_ScheduledChargingModeOff      ScheduledChargingModeValue = 1
	ScheduledChargingModeValue_ScheduledChargingModeStartAt  ScheduledChargingModeValue = 2
	ScheduledChargingModeValue_ScheduledChargingModeDepartBy ScheduledChargingModeValue = 3
)

// Enum value maps for ScheduledChargingModeValue.
var (
	ScheduledChargingModeValue_name = map[int32]string{
		0: "ScheduledChargingModeUnknown",
		1: "ScheduledChargingModeOff",
		2: "ScheduledChargingModeStartAt",
		3: "ScheduledChargingModeDepartBy",
	}
	ScheduledChargingModeValue_value = map[string]int32{
		"ScheduledChargingModeUnknown":  0,
		"ScheduledChargingModeOff":      1,
		"ScheduledChargingModeStartAt":  2,
		"ScheduledChargingModeDepartBy": 3,
	}
)

func (x ScheduledChargingModeValue) Enum() *ScheduledChargingModeValue {
	p := new(ScheduledChargingModeValue)
	*p = x
	return p
}

func (x ScheduledChargingModeValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduledChargingModeValue) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[8].Descriptor()
}

func (ScheduledChargingModeValue) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[8]
}

func (x ScheduledChargingModeValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduledChargingModeValue.Descriptor instead.
func (ScheduledChargingModeValue) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{8}
}

type SentryModeState int32

const (
	SentryModeState_SentryModeStateUnknown SentryModeState = 0
	SentryModeState_SentryModeStateOff     SentryModeState = 1
	SentryModeState_SentryModeStateIdle    SentryModeState = 2
	SentryModeState_SentryModeStateArmed   SentryModeState = 3
	SentryModeState_SentryModeStateAware   SentryModeState = 4
	SentryModeState_SentryModeStatePanic   SentryModeState = 5
	SentryModeState_SentryModeStateQuiet   SentryModeState = 6
)

// Enum value maps for SentryModeState.
var (
	SentryModeState_name = map[int32]string{
		0: "SentryModeStateUnknown",
		1: "SentryModeStateOff",
		2: "SentryModeStateIdle",
		3: "SentryModeStateArmed",
		4: "SentryModeStateAware",
		5: "SentryModeStatePanic",
		6: "SentryModeStateQuiet",
	}
	SentryModeState_value = map[string]int32{
		"SentryModeStateUnknown": 0,
		"SentryModeStateOff":     1,
		"SentryModeStateIdle":    2,
		"SentryModeStateArmed":   3,
		"SentryModeStateAware":   4,
		"SentryModeStatePanic":   5,
		"SentryModeStateQuiet":   6,
	}
)

func (x SentryModeState) Enum() *SentryModeState {
	p := new(SentryModeState)
	*p = x
	return p
}

func (x SentryModeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SentryModeState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[9].Descriptor()
}

func (SentryModeState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[9]
}

func (x SentryModeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SentryModeState.Descriptor instead.
func (SentryModeState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{9}
}

type SpeedAssistLevel int32

const (
	SpeedAssistLevel_SpeedAssistLevelUnknown SpeedAssistLevel = 0
	SpeedAssistLevel_SpeedAssistLevelNone    SpeedAssistLevel = 1
	SpeedAssistLevel_SpeedAssistLevelDisplay SpeedAssistLevel = 2
	SpeedAssistLevel_SpeedAssistLevelChime   SpeedAssistLevel = 3
)

// Enum value maps for SpeedAssistLevel.
var (
	SpeedAssistLevel_name = map[int32]string{
		0: "SpeedAssistLevelUnknown",
		1: "SpeedAssistLevelNone",
		2: "SpeedAssistLevelDisplay",
		3: "SpeedAssistLevelChime",
	}
	SpeedAssistLevel_value = map[string]int32{
		"SpeedAssistLevelUnknown": 0,
		"SpeedAssistLevelNone":    1,
		"SpeedAssistLevelDisplay": 2,
		"SpeedAssistLevelChime":   3,
	}
)

func (x SpeedAssistLevel) Enum() *SpeedAssistLevel {
	p := new(SpeedAssistLevel)
	*p = x
	return p
}

func (x SpeedAssistLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeedAssistLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[10].Descriptor()
}

func (SpeedAssistLevel) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[10]
}

func (x SpeedAssistLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeedAssistLevel.Descriptor instead.
func (SpeedAssistLevel) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{10}
}

type BMSStateValue int32

const (
	BMSStateValue_BMSStateUnknown    BMSStateValue = 0
	BMSStateValue_BMSStateStandby    BMSStateValue = 1
	BMSStateValue_BMSStateDrive      BMSStateValue = 2
	BMSStateValue_BMSStateSupport    BMSStateValue = 3
	BMSStateValue_BMSStateCharge     BMSStateValue = 4
	BMSStateValue_BMSStateFEIM       BMSStateValue = 5
	BMSStateValue_BMSStateClearFault BMSStateValue = 6
	BMSStateValue_BMSStateFault      BMSStateValue = 7
	BMSStateValue_BMSStateWeld       BMSStateValue = 8
	BMSStateValue_BMSStateTest       BMSStateValue = 9
	BMSStateValue_BMSStateSNA        BMSStateValue = 10
)

// Enum value maps for BMSStateValue.
var (
	BMSStateValue_name = map[int32]string{
		0:  "BMSStateUnknown",
		1:  "BMSStateStandby",
		2:  "BMSStateDrive",
		3:  "BMSStateSupport",
		4:  "BMSStateCharge",
		5:  "BMSStateFEIM",
		6:  "BMSStateClearFault",
		7:  "BMSStateFault",
		8:  "BMSStateWeld",
		9:  "BMSStateTest",
		10: "BMSStateSNA",
	}
	BMSStateValue_value = map[string]int32{
		"BMSStateUnknown":    0,
		"BMSStateStandby":    1,
		"BMSStateDrive":      2,
		"BMSStateSupport":    3,
		"BMSStateCharge":     4,
		"BMSStateFEIM":       5,
		"BMSStateClearFault": 6,
		"BMSStateFault":      7,
		"BMSStateWeld":       8,
		"BMSStateTest":       9,
		"BMSStateSNA":        10,
	}
)

func (x BMSStateValue) Enum() *BMSStateValue {
	p := new(BMSStateValue)
	*p = x
	return p
}

func (x BMSStateValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BMSStateValue) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[11].Descriptor()
}

func (BMSStateValue) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[11]
}

func (x BMSStateValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BMSStateValue.Descriptor instead.
func (BMSStateValue) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{11}
}

type BuckleStatus int32

const (
	BuckleStatus_BuckleStatusUnknown   BuckleStatus = 0
	BuckleStatus_BuckleStatusUnlatched BuckleStatus = 1
	BuckleStatus_BuckleStatusLatched   BuckleStatus = 2
	BuckleStatus_BuckleStatusFaulted   BuckleStatus = 3
)

// Enum value maps for BuckleStatus.
var (
	BuckleStatus_name = map[int32]string{
		0: "BuckleStatusUnknown",
		1: "BuckleStatusUnlatched",
		2: "BuckleStatusLatched",
		3: "BuckleStatusFaulted",
	}
	BuckleStatus_value = map[string]int32{
		"BuckleStatusUnknown":   0,
		"BuckleStatusUnlatched": 1,
		"BuckleStatusLatched":   2,
		"BuckleStatusFaulted":   3,
	}
)

func (x BuckleStatus) Enum() *BuckleStatus {
	p := new(BuckleStatus)
	*p = x
	return p
}

func (x BuckleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuckleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[12].Descriptor()
}

func (BuckleStatus) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[12]
}

func (x BuckleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuckleStatus.Descriptor instead.
func (BuckleStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{12}
}

type CarTypeValue int32

const (
	CarTypeValue_CarTypeUnknown    CarTypeValue = 0
	CarTypeValue_CarTypeModelS     CarTypeValue = 1
	CarTypeValue_CarTypeModelX     CarTypeValue = 2
	CarTypeValue_CarTypeModel3     CarTypeValue = 3
	CarTypeValue_CarTypeModelY     CarTypeValue = 4
	CarTypeValue_CarTypeSemiTruck  CarTypeValue = 5
	CarTypeValue_CarTypeCybertruck CarTypeValue = 6
)

// Enum value maps for CarTypeValue.
var (
	CarTypeValue_name = map[int32]string{
		0: "CarTypeUnknown",
		1: "CarTypeModelS",
		2: "CarTypeModelX",
		3: "CarTypeModel3",
		4: "CarTypeModelY",
		5: "CarTypeSemiTruck",
		6: "CarTypeCybertruck",
	}
	CarTypeValue_value = map[string]int32{
		"CarTypeUnknown":    0,
		"CarTypeModelS":     1,
		"CarTypeModelX":     2,
		"CarTypeModel3":     3,
		"CarTypeModelY":     4,
		"CarTypeSemiTruck":  5,
		"CarTypeCybertruck": 6,
	}
)

func (x CarTypeValue) Enum() *CarTypeValue {
	p := new(CarTypeValue)
	*p = x
	return p
}

func (x CarTypeValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarTypeValue) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[13].Descriptor()
}

func (CarTypeValue) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[13]
}

func (x CarTypeValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarTypeValue.Descriptor instead.
func (CarTypeValue) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{13}
}

type ChargePortValue int32

const (
	ChargePortValue_ChargePortUnknown ChargePortValue = 0
	ChargePortValue_ChargePortUS      ChargePortValue = 1
	ChargePortValue_ChargePortEU      ChargePortValue = 2
	ChargePortValue_ChargePortGB      ChargePortValue = 3
	ChargePortValue_ChargePortCCS     ChargePortValue = 4
)

// Enum value maps for ChargePortValue.
var (
	ChargePortValue_name = map[int32]string{
		0: "ChargePortUnknown",
		1: "ChargePortUS",
		2: "ChargePortEU",
		3: "ChargePortGB",
		4: "ChargePortCCS",
	}
	ChargePortValue_value = map[string]int32{
		"ChargePortUnknown": 0,
		"ChargePortUS":      1,
		"ChargePortEU":      2,
		"ChargePortGB":      3,
		"ChargePortCCS":     4,
	}
)

func (x ChargePortValue) Enum() *ChargePortValue {
	p := new(ChargePortValue)
	*p = x
	return p
}

func (x ChargePortValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargePortValue) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[14].Descriptor()
}

func (ChargePortValue) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[14]
}

func (x ChargePortValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargePortValue.Descriptor instead.
func (ChargePortValue) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{14}
}

type ChargePortLatchValue int32

const (
	ChargePortLatchValue_ChargePortLatchUnknown    ChargePortLatchValue = 0
	ChargePortLatchValue_ChargePortLatchSNA        ChargePortLatchValue = 1
	ChargePortLatchValue_ChargePortLatchDisengaged ChargePortLatchValue = 2
	ChargePortLatchValue_ChargePortLatchEngaged    ChargePortLatchValue = 3
	ChargePortLatchValue_ChargePortLatchBlocking   ChargePortLatchValue = 4
)

// Enum value maps for ChargePortLatchValue.
var (
	ChargePortLatchValue_name = map[int32]string{
		0: "ChargePortLatchUnknown",
		1: "ChargePortLatchSNA",
		2: "ChargePortLatchDisengaged",
		3: "ChargePortLatchEngaged",
		4: "ChargePortLatchBlocking",
	}
	ChargePortLatchValue_value = map[string]int32{
		"ChargePortLatchUnknown":    0,
		"ChargePortLatchSNA":        1,
		"ChargePortLatchDisengaged": 2,
		"ChargePortLatchEngaged":    3,
		"ChargePortLatchBlocking":   4,
	}
)

func (x ChargePortLatchValue) Enum() *ChargePortLatchValue {
	p := new(ChargePortLatchValue)
	*p = x
	return p
}

func (x ChargePortLatchValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargePortLatchValue) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[15].Descriptor()
}

func (ChargePortLatchValue) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[15]
}

func (x ChargePortLatchValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargePortLatchValue.Descriptor instead.
func (ChargePortLatchValue) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{15}
}

type DriveInverterState int32

const (
	DriveInverterState_DriveInverterStateUnknown     DriveInverterState = 0
	DriveInverterState_DriveInverterStateUnavailable DriveInverterState = 1
	DriveInverterState_DriveInverterStateStandby     DriveInverterState = 2
	DriveInverterState_DriveInverterStateFault       DriveInverterState = 3
	DriveInverterState_DriveInverterStateAbort       DriveInverterState = 4
	DriveInverterState_DriveInverterStateEnable      DriveInverterState = 5
)

// Enum value maps for DriveInverterState.
var (
	DriveInverterState_name = map[int32]string{
		0: "DriveInverterStateUnknown",
		1: "DriveInverterStateUnavailable",
		2: "DriveInverterStateStandby",
		3: "DriveInverterStateFault",
		4: "DriveInverterStateAbort",
		5: "DriveInverterStateEnable",
	}
	DriveInverterState_value = map[string]int32{
		"DriveInverterStateUnknown":     0,
		"DriveInverterStateUnavailable": 1,
		"DriveInverterStateStandby":     2,
		"DriveInverterStateFault":       3,
		"DriveInverterStateAbort":       4,
		"DriveInverterStateEnable":      5,
	}
)

func (x DriveInverterState) Enum() *DriveInverterState {
	p := new(DriveInverterState)
	*p = x
	return p
}

func (x DriveInverterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriveInverterState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[16].Descriptor()
}

func (DriveInverterState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[16]
}

func (x DriveInverterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriveInverterState.Descriptor instead.
func (DriveInverterState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{16}
}

type HvilStatus int32

const (
	HvilStatus_HvilStatusUnknown HvilStatus = 0
	HvilStatus_HvilStatusFault   HvilStatus = 1
	HvilStatus_HvilStatusOK      HvilStatus = 2
)

// Enum value maps for HvilStatus.
var (
	HvilStatus_name = map[int32]string{
		0: "HvilStatusUnknown",
		1: "HvilStatusFault",
		2: "HvilStatusOK",
	}
	HvilStatus_value = map[string]int32{
		"HvilStatusUnknown": 0,
		"HvilStatusFault":   1,
		"HvilStatusOK":      2,
	}
)

func (x HvilStatus) Enum() *HvilStatus {
	p := new(HvilStatus)
	*p = x
	return p
}

func (x HvilStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HvilStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[17].Descriptor()
}

func (HvilStatus) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[17]
}

func (x HvilStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HvilStatus.Descriptor instead.
func (HvilStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{17}
}

type WindowState int32

const (
	WindowState_WindowStateUnknown       WindowState = 0
	WindowState_WindowStateClosed        WindowState = 1
	WindowState_WindowStatePartiallyOpen WindowState = 2
	WindowState_WindowStateOpened        WindowState = 3
)

// Enum value maps for WindowState.
var (
	WindowState_name = map[int32]string{
		0: "WindowStateUnknown",
		1: "WindowStateClosed",
		2: "WindowStatePartiallyOpen",
		3: "WindowStateOpened",
	}
	WindowState_value = map[string]int32{
		"WindowStateUnknown":       0,
		"WindowStateClosed":        1,
		"WindowStatePartiallyOpen": 2,
		"WindowStateOpened":        3,
	}
)

func (x WindowState) Enum() *WindowState {
	p := new(WindowState)
	*p = x
	return p
}

func (x WindowState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[18].Descriptor()
}

func (WindowState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[18]
}

func (x WindowState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowState.Descriptor instead.
func (WindowState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{18}
}

type SeatFoldPosition int32

const (
	SeatFoldPosition_SeatFoldPositionUnknown       SeatFoldPosition = 0
	SeatFoldPosition_SeatFoldPositionSNA           SeatFoldPosition = 1
	SeatFoldPosition_SeatFoldPositionFaulted       SeatFoldPosition = 2
	SeatFoldPosition_SeatFoldPositionNotConfigured SeatFoldPosition = 3
	SeatFoldPosition_SeatFoldPositionFolded        SeatFoldPosition = 4
	SeatFoldPosition_SeatFoldPositionUnfolded      SeatFoldPosition = 5
)

// Enum value maps for SeatFoldPosition.
var (
	SeatFoldPosition_name = map[int32]string{
		0: "SeatFoldPositionUnknown",
		1: "SeatFoldPositionSNA",
		2: "SeatFoldPositionFaulted",
		3: "SeatFoldPositionNotConfigured",
		4: "SeatFoldPositionFolded",
		5: "SeatFoldPositionUnfolded",
	}
	SeatFoldPosition_value = map[string]int32{
		"SeatFoldPositionUnknown":       0,
		"SeatFoldPositionSNA":           1,
		"SeatFoldPositionFaulted":       2,
		"SeatFoldPositionNotConfigured": 3,
		"SeatFoldPositionFolded":        4,
		"SeatFoldPositionUnfolded":      5,
	}
)

func (x SeatFoldPosition) Enum() *SeatFoldPosition {
	p := new(SeatFoldPosition)
	*p = x
	return p
}

func (x SeatFoldPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeatFoldPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[19].Descriptor()
}

func (SeatFoldPosition) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[19]
}

func (x SeatFoldPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeatFoldPosition.Descriptor instead.
func (SeatFoldPosition) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{19}
}

type TractorAirStatus int32

const (
	TractorAirStatus_TractorAirStatusUnknown                        TractorAirStatus = 0
	TractorAirStatus_TractorAirStatusNotAvailable                   TractorAirStatus = 1
	TractorAirStatus_TractorAirStatusError                          TractorAirStatus = 2
	TractorAirStatus_TractorAirStatusCharged                        TractorAirStatus = 3
	TractorAirStatus_TractorAirStatusBuildingPressureIntermediate   TractorAirStatus = 4
	TractorAirStatus_TractorAirStatusExhaustingPressureIntermediate TractorAirStatus = 5
	TractorAirStatus_TractorAirStatusExhausted                      TractorAirStatus = 6
)

// Enum value maps for TractorAirStatus.
var (
	TractorAirStatus_name = map[int32]string{
		0: "TractorAirStatusUnknown",
		1: "TractorAirStatusNotAvailable",
		2: "TractorAirStatusError",
		3: "TractorAirStatusCharged",
		4: "TractorAirStatusBuildingPressureIntermediate",
		5: "TractorAirStatusExhaustingPressureIntermediate",
		6: "TractorAirStatusExhausted",
	}
	TractorAirStatus_value = map[string]int32{
		"TractorAirStatusUnknown":                        0,
		"TractorAirStatusNotAvailable":                   1,
		"TractorAirStatusError":                          2,
		"TractorAirStatusCharged":                        3,
		"TractorAirStatusBuildingPressureIntermediate":   4,
		"TractorAirStatusExhaustingPressureIntermediate": 5,
		"TractorAirStatusExhausted":                      6,
	}
)

func (x TractorAirStatus) Enum() *TractorAirStatus {
	p := new(TractorAirStatus)
	*p = x
	return p
}

func (x TractorAirStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TractorAirStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[20].Descriptor()
}

func (TractorAirStatus) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[20]
}

func (x TractorAirStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TractorAirStatus.Descriptor instead.
func (TractorAirStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{20}
}

type TrailerAirStatus int32

const (
	TrailerAirStatus_TrailerAirStatusUnknown                        TrailerAirStatus = 0
	TrailerAirStatus_TrailerAirStatusSNA                            TrailerAirStatus = 1
	TrailerAirStatus_TrailerAirStatusInvalid                        TrailerAirStatus = 2
	TrailerAirStatus_TrailerAirStatusBobtailMode                    TrailerAirStatus = 3
	TrailerAirStatus_TrailerAirStatusCharged                        TrailerAirStatus = 4
	TrailerAirStatus_TrailerAirStatusBuildingPressureIntermediate   TrailerAirStatus = 5
	TrailerAirStatus_TrailerAirStatusExhaustingPressureIntermediate TrailerAirStatus = 6
	TrailerAirStatus_TrailerAirStatusExhausted                      TrailerAirStatus = 7
)

// Enum value maps for TrailerAirStatus.
var (
	TrailerAirStatus_name = map[int32]string{
		0: "TrailerAirStatusUnknown",
		1: "TrailerAirStatusSNA",
		2: "TrailerAirStatusInvalid",
		3: "TrailerAirStatusBobtailMode",
		4: "TrailerAirStatusCharged",
		5: "TrailerAirStatusBuildingPressureIntermediate",
		6: "TrailerAirStatusExhaustingPressureIntermediate",
		7: "TrailerAirStatusExhausted",
	}
	TrailerAirStatus_value = map[string]int32{
		"TrailerAirStatusUnknown":                        0,
		"TrailerAirStatusSNA":                            1,
		"TrailerAirStatusInvalid":                        2,
		"TrailerAirStatusBobtailMode":                    3,
		"TrailerAirStatusCharged":                        4,
		"TrailerAirStatusBuildingPressureIntermediate":   5,
		"TrailerAirStatusExhaustingPressureIntermediate": 6,
		"TrailerAirStatusExhausted":                      7,
	}
)

func (x TrailerAirStatus) Enum() *TrailerAirStatus {
	p := new(TrailerAirStatus)
	*p = x
	return p
}

func (x TrailerAirStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrailerAirStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[21].Descriptor()
}

func (TrailerAirStatus) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[21]
}

func (x TrailerAirStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrailerAirStatus.Descriptor instead.
func (TrailerAirStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{21}
}

type HvacAutoModeState int32

const (
	HvacAutoModeState_HvacAutoModeStateUnknown  HvacAutoModeState = 0
	HvacAutoModeState_HvacAutoModeStateOn       HvacAutoModeState = 1
	HvacAutoModeState_HvacAutoModeStateOverride HvacAutoModeState = 2
)

// Enum value maps for HvacAutoModeState.
var (
	HvacAutoModeState_name = map[int32]string{
		0: "HvacAutoModeStateUnknown",
		1: "HvacAutoModeStateOn",
		2: "HvacAutoModeStateOverride",
	}
	HvacAutoModeState_value = map[string]int32{
		"HvacAutoModeStateUnknown":  0,
		"HvacAutoModeStateOn":       1,
		"HvacAutoModeStateOverride": 2,
	}
)

func (x HvacAutoModeState) Enum() *HvacAutoModeState {
	p := new(HvacAutoModeState)
	*p = x
	return p
}

func (x HvacAutoModeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HvacAutoModeState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[22].Descriptor()
}

func (HvacAutoModeState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[22]
}

func (x HvacAutoModeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HvacAutoModeState.Descriptor instead.
func (HvacAutoModeState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{22}
}

type CabinOverheatProtectionModeState int32

const (
	CabinOverheatProtectionModeState_CabinOverheatProtectionModeStateUnknown CabinOverheatProtectionModeState = 0
	CabinOverheatProtectionModeState_CabinOverheatProtectionModeStateOff     CabinOverheatProtectionModeState = 1
	CabinOverheatProtectionModeState_CabinOverheatProtectionModeStateOn      CabinOverheatProtectionModeState = 2
	CabinOverheatProtectionModeState_CabinOverheatProtectionModeStateFanOnly CabinOverheatProtectionModeState = 3
)

// Enum value maps for CabinOverheatProtectionModeState.
var (
	CabinOverheatProtectionModeState_name = map[int32]string{
		0: "CabinOverheatProtectionModeStateUnknown",
		1: "CabinOverheatProtectionModeStateOff",
		2: "CabinOverheatProtectionModeStateOn",
		3: "CabinOverheatProtectionModeStateFanOnly",
	}
	CabinOverheatProtectionModeState_value = map[string]int32{
		"CabinOverheatProtectionModeStateUnknown": 0,
		"CabinOverheatProtectionModeStateOff":     1,
		"CabinOverheatProtectionModeStateOn":      2,
		"CabinOverheatProtectionModeStateFanOnly": 3,
	}
)

func (x CabinOverheatProtectionModeState) Enum() *CabinOverheatProtectionModeState {
	p := new(CabinOverheatProtectionModeState)
	*p = x
	return p
}

func (x CabinOverheatProtectionModeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CabinOverheatProtectionModeState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[23].Descriptor()
}

func (CabinOverheatProtectionModeState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[23]
}

func (x CabinOverheatProtectionModeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CabinOverheatProtectionModeState.Descriptor instead.
func (CabinOverheatProtectionModeState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{23}
}

type ClimateOverheatProtectionTempLimit int32

const (
	ClimateOverheatProtectionTempLimit_ClimateOverheatProtectionTempLimitUnknown ClimateOverheatProtectionTempLimit = 0
	ClimateOverheatProtectionTempLimit_ClimateOverheatProtectionTempLimitHigh    ClimateOverheatProtectionTempLimit = 1
	ClimateOverheatProtectionTempLimit_ClimateOverheatProtectionTempLimitMedium  ClimateOverheatProtectionTempLimit = 2
	ClimateOverheatProtectionTempLimit_ClimateOverheatProtectionTempLimitLow     ClimateOverheatProtectionTempLimit = 3
)

// Enum value maps for ClimateOverheatProtectionTempLimit.
var (
	ClimateOverheatProtectionTempLimit_name = map[int32]string{
		0: "ClimateOverheatProtectionTempLimitUnknown",
		1: "ClimateOverheatProtectionTempLimitHigh",
		2: "ClimateOverheatProtectionTempLimitMedium",
		3: "ClimateOverheatProtectionTempLimitLow",
	}
	ClimateOverheatProtectionTempLimit_value = map[string]int32{
		"ClimateOverheatProtectionTempLimitUnknown": 0,
		"ClimateOverheatProtectionTempLimitHigh":    1,
		"ClimateOverheatProtectionTempLimitMedium":  2,
		"ClimateOverheatProtectionTempLimitLow":     3,
	}
)

func (x ClimateOverheatProtectionTempLimit) Enum() *ClimateOverheatProtectionTempLimit {
	p := new(ClimateOverheatProtectionTempLimit)
	*p = x
	return p
}

func (x ClimateOverheatProtectionTempLimit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClimateOverheatProtectionTempLimit) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[24].Descriptor()
}

func (ClimateOverheatProtectionTempLimit) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[24]
}

func (x ClimateOverheatProtectionTempLimit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClimateOverheatProtectionTempLimit.Descriptor instead.
func (ClimateOverheatProtectionTempLimit) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{24}
}

type DefrostModeState int32

const (
	DefrostModeState_DefrostModeStateUnknown   DefrostModeState = 0
	DefrostModeState_DefrostModeStateOff       DefrostModeState = 1
	DefrostModeState_DefrostModeStateNormal    DefrostModeState = 2
	DefrostModeState_DefrostModeStateMax       DefrostModeState = 3
	DefrostModeState_DefrostModeStateAutoDefog DefrostModeState = 4
)

// Enum value maps for DefrostModeState.
var (
	DefrostModeState_name = map[int32]string{
		0: "DefrostModeStateUnknown",
		1: "DefrostModeStateOff",
		2: "DefrostModeStateNormal",
		3: "DefrostModeStateMax",
		4: "DefrostModeStateAutoDefog",
	}
	DefrostModeState_value = map[string]int32{
		"DefrostModeStateUnknown":   0,
		"DefrostModeStateOff":       1,
		"DefrostModeStateNormal":    2,
		"DefrostModeStateMax":       3,
		"DefrostModeStateAutoDefog": 4,
	}
)

func (x DefrostModeState) Enum() *DefrostModeState {
	p := new(DefrostModeState)
	*p = x
	return p
}

func (x DefrostModeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefrostModeState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[25].Descriptor()
}

func (DefrostModeState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[25]
}

func (x DefrostModeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefrostModeState.Descriptor instead.
func (DefrostModeState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{25}
}

type ClimateKeeperModeState int32

const (
	ClimateKeeperModeState_ClimateKeeperModeStateUnknown ClimateKeeperModeState = 0
	ClimateKeeperModeState_ClimateKeeperModeStateOff     ClimateKeeperModeState = 1
	ClimateKeeperModeState_ClimateKeeperModeStateOn      ClimateKeeperModeState = 2
	ClimateKeeperModeState_ClimateKeeperModeStateDog     ClimateKeeperModeState = 3
	ClimateKeeperModeState_ClimateKeeperModeStateParty   ClimateKeeperModeState = 4
)

// Enum value maps for ClimateKeeperModeState.
var (
	ClimateKeeperModeState_name = map[int32]string{
		0: "ClimateKeeperModeStateUnknown",
		1: "ClimateKeeperModeStateOff",
		2: "ClimateKeeperModeStateOn",
		3: "ClimateKeeperModeStateDog",
		4: "ClimateKeeperModeStateParty",
	}
	ClimateKeeperModeState_value = map[string]int32{
		"ClimateKeeperModeStateUnknown": 0,
		"ClimateKeeperModeStateOff":     1,
		"ClimateKeeperModeStateOn":      2,
		"ClimateKeeperModeStateDog":     3,
		"ClimateKeeperModeStateParty":   4,
	}
)

func (x ClimateKeeperModeState) Enum() *ClimateKeeperModeState {
	p := new(ClimateKeeperModeState)
	*p = x
	return p
}

func (x ClimateKeeperModeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClimateKeeperModeState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[26].Descriptor()
}

func (ClimateKeeperModeState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[26]
}

func (x ClimateKeeperModeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClimateKeeperModeState.Descriptor instead.
func (ClimateKeeperModeState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{26}
}

type HvacPowerState int32

const (
	HvacPowerState_HvacPowerStateUnknown         HvacPowerState = 0
	HvacPowerState_HvacPowerStateOff             HvacPowerState = 1
	HvacPowerState_HvacPowerStateOn              HvacPowerState = 2
	HvacPowerState_HvacPowerStatePrecondition    HvacPowerState = 3
	HvacPowerState_HvacPowerStateOverheatProtect HvacPowerState = 4
)

// Enum value maps for HvacPowerState.
var (
	HvacPowerState_name = map[int32]string{
		0: "HvacPowerStateUnknown",
		1: "HvacPowerStateOff",
		2: "HvacPowerStateOn",
		3: "HvacPowerStatePrecondition",
		4: "HvacPowerStateOverheatProtect",
	}
	HvacPowerState_value = map[string]int32{
		"HvacPowerStateUnknown":         0,
		"HvacPowerStateOff":             1,
		"HvacPowerStateOn":              2,
		"HvacPowerStatePrecondition":    3,
		"HvacPowerStateOverheatProtect": 4,
	}
)

func (x HvacPowerState) Enum() *HvacPowerState {
	p := new(HvacPowerState)
	*p = x
	return p
}

func (x HvacPowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HvacPowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[27].Descriptor()
}

func (HvacPowerState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[27]
}

func (x HvacPowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HvacPowerState.Descriptor instead.
func (HvacPowerState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{27}
}

type FastCharger int32

const (
	FastCharger_FastChargerUnknown         FastCharger = 0
	FastCharger_FastChargerSupercharger    FastCharger = 1
	FastCharger_FastChargerCHAdeMO         FastCharger = 2
	FastCharger_FastChargerGB              FastCharger = 3
	FastCharger_FastChargerACSingleWireCAN FastCharger = 4
	FastCharger_FastChargerCombo           FastCharger = 5
	FastCharger_FastChargerMCSingleWireCAN FastCharger = 6
	FastCharger_FastChargerOther           FastCharger = 7
	FastCharger_FastChargerSNA             FastCharger = 8
)

// Enum value maps for FastCharger.
var (
	FastCharger_name = map[int32]string{
		0: "FastChargerUnknown",
		1: "FastChargerSupercharger",
		2: "FastChargerCHAdeMO",
		3: "FastChargerGB",
		4: "FastChargerACSingleWireCAN",
		5: "FastChargerCombo",
		6: "FastChargerMCSingleWireCAN",
		7: "FastChargerOther",
		8: "FastChargerSNA",
	}
	FastCharger_value = map[string]int32{
		"FastChargerUnknown":         0,
		"FastChargerSupercharger":    1,
		"FastChargerCHAdeMO":         2,
		"FastChargerGB":              3,
		"FastChargerACSingleWireCAN": 4,
		"FastChargerCombo":           5,
		"FastChargerMCSingleWireCAN": 6,
		"FastChargerOther":           7,
		"FastChargerSNA":             8,
	}
)

func (x FastCharger) Enum() *FastCharger {
	p := new(FastCharger)
	*p = x
	return p
}

func (x FastCharger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastCharger) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[28].Descriptor()
}

func (FastCharger) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[28]
}

func (x FastCharger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FastCharger.Descriptor instead.
func (FastCharger) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{28}
}

type CableType int32

const (
	CableType_CableTypeUnknown CableType = 0
	CableType_CableTypeIEC     CableType = 1
	CableType_CableTypeSAE     CableType = 2
	CableType_CableTypeGB_AC   CableType = 3
	CableType_CableTypeGB_DC   CableType = 4
	CableType_CableTypeSNA     CableType = 5
)

// Enum value maps for CableType.
var (
	CableType_name = map[int32]string{
		0: "CableTypeUnknown",
		1: "CableTypeIEC",
		2: "CableTypeSAE",
		3: "CableTypeGB_AC",
		4: "CableTypeGB_DC",
		5: "CableTypeSNA",
	}
	CableType_value = map[string]int32{
		"CableTypeUnknown": 0,
		"CableTypeIEC":     1,
		"CableTypeSAE":     2,
		"CableTypeGB_AC":   3,
		"CableTypeGB_DC":   4,
		"CableTypeSNA":     5,
	}
)

func (x CableType) Enum() *CableType {
	p := new(CableType)
	*p = x
	return p
}

func (x CableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CableType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[29].Descriptor()
}

func (CableType) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[29]
}

func (x CableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CableType.Descriptor instead.
func (CableType) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{29}
}

type TonneauTentModeState int32

const (
	TonneauTentModeState_TonneauTentModeStateUnknown  TonneauTentModeState = 0
	TonneauTentModeState_TonneauTentModeStateInactive TonneauTentModeState = 1
	TonneauTentModeState_TonneauTentModeStateMoving   TonneauTentModeState = 2
	TonneauTentModeState_TonneauTentModeStateFailed   TonneauTentModeState = 3
	TonneauTentModeState_TonneauTentModeStateActive   TonneauTentModeState = 4
)

// Enum value maps for TonneauTentModeState.
var (
	TonneauTentModeState_name = map[int32]string{
		0: "TonneauTentModeStateUnknown",
		1: "TonneauTentModeStateInactive",
		2: "TonneauTentModeStateMoving",
		3: "TonneauTentModeStateFailed",
		4: "TonneauTentModeStateActive",
	}
	TonneauTentModeState_value = map[string]int32{
		"TonneauTentModeStateUnknown":  0,
		"TonneauTentModeStateInactive": 1,
		"TonneauTentModeStateMoving":   2,
		"TonneauTentModeStateFailed":   3,
		"TonneauTentModeStateActive":   4,
	}
)

func (x TonneauTentModeState) Enum() *TonneauTentModeState {
	p := new(TonneauTentModeState)
	*p = x
	return p
}

func (x TonneauTentModeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TonneauTentModeState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[30].Descriptor()
}

func (TonneauTentModeState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[30]
}

func (x TonneauTentModeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TonneauTentModeState.Descriptor instead.
func (TonneauTentModeState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{30}
}

type TonneauPositionState int32

const (
	TonneauPositionState_TonneauPositionStateUnknown       TonneauPositionState = 0
	TonneauPositionState_TonneauPositionStateInvalid       TonneauPositionState = 1
	TonneauPositionState_TonneauPositionStateClosed        TonneauPositionState = 2
	TonneauPositionState_TonneauPositionStatePartiallyOpen TonneauPositionState = 3
	TonneauPositionState_TonneauPositionStateFullyOpen     TonneauPositionState = 4
)

// Enum value maps for TonneauPositionState.
var (
	TonneauPositionState_name = map[int32]string{
		0: "TonneauPositionStateUnknown",
		1: "TonneauPositionStateInvalid",
		2: "TonneauPositionStateClosed",
		3: "TonneauPositionStatePartiallyOpen",
		4: "TonneauPositionStateFullyOpen",
	}
	TonneauPositionState_value = map[string]int32{
		"TonneauPositionStateUnknown":       0,
		"TonneauPositionStateInvalid":       1,
		"TonneauPositionStateClosed":        2,
		"TonneauPositionStatePartiallyOpen": 3,
		"TonneauPositionStateFullyOpen":     4,
	}
)

func (x TonneauPositionState) Enum() *TonneauPositionState {
	p := new(TonneauPositionState)
	*p = x
	return p
}

func (x TonneauPositionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TonneauPositionState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[31].Descriptor()
}

func (TonneauPositionState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[31]
}

func (x TonneauPositionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TonneauPositionState.Descriptor instead.
func (TonneauPositionState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{31}
}

type PowershareState int32

const (
	PowershareState_PowershareStateUnknown                 PowershareState = 0
	PowershareState_PowershareStateInactive                PowershareState = 1
	PowershareState_PowershareStateHandshaking             PowershareState = 2
	PowershareState_PowershareStateInit                    PowershareState = 3
	PowershareState_PowershareStateEnabled                 PowershareState = 4
	PowershareState_PowershareStateEnabledReconnectingSoon PowershareState = 5
	PowershareState_PowershareStateStopped                 PowershareState = 6
)

// Enum value maps for PowershareState.
var (
	PowershareState_name = map[int32]string{
		0: "PowershareStateUnknown",
		1: "PowershareStateInactive",
		2: "PowershareStateHandshaking",
		3: "PowershareStateInit",
		4: "PowershareStateEnabled",
		5: "PowershareStateEnabledReconnectingSoon",
		6: "PowershareStateStopped",
	}
	PowershareState_value = map[string]int32{
		"PowershareStateUnknown":                 0,
		"PowershareStateInactive":                1,
		"PowershareStateHandshaking":             2,
		"PowershareStateInit":                    3,
		"PowershareStateEnabled":                 4,
		"PowershareStateEnabledReconnectingSoon": 5,
		"PowershareStateStopped":                 6,
	}
)

func (x PowershareState) Enum() *PowershareState {
	p := new(PowershareState)
	*p = x
	return p
}

func (x PowershareState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowershareState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[32].Descriptor()
}

func (PowershareState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[32]
}

func (x PowershareState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowershareState.Descriptor instead.
func (PowershareState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{32}
}

type PowershareStopReasonStatus int32

const (
	PowershareStopReasonStatus_PowershareStopReasonStatusUnknown        PowershareStopReasonStatus = 0
	PowershareStopReasonStatus_PowershareStopReasonStatusNone           PowershareStopReasonStatus = 1
	PowershareStopReasonStatus_PowershareStopReasonStatusSOCTooLow      PowershareStopReasonStatus = 2
	PowershareStopReasonStatus_PowershareStopReasonStatusRetry          PowershareStopReasonStatus = 3
	PowershareStopReasonStatus_PowershareStopReasonStatusFault          PowershareStopReasonStatus = 4
	PowershareStopReasonStatus_PowershareStopReasonStatusUser           PowershareStopReasonStatus = 5
	PowershareStopReasonStatus_PowershareStopReasonStatusReconnecting   PowershareStopReasonStatus = 6
	PowershareStopReasonStatus_PowershareStopReasonStatusAuthentication PowershareStopReasonStatus = 7
)

// Enum value maps for PowershareStopReasonStatus.
var (
	PowershareStopReasonStatus_name = map[int32]string{
		0: "PowershareStopReasonStatusUnknown",
		1: "PowershareStopReasonStatusNone",
		2: "PowershareStopReasonStatusSOCTooLow",
		3: "PowershareStopReasonStatusRetry",
		4: "PowershareStopReasonStatusFault",
		5: "PowershareStopReasonStatusUser",
		6: "PowershareStopReasonStatusReconnecting",
		7: "PowershareStopReasonStatusAuthentication",
	}
	PowershareStopReasonStatus_value = map[string]int32{
		"PowershareStopReasonStatusUnknown":        0,
		"PowershareStopReasonStatusNone":           1,
		"PowershareStopReasonStatusSOCTooLow":      2,
		"PowershareStopReasonStatusRetry":          3,
		"PowershareStopReasonStatusFault":          4,
		"PowershareStopReasonStatusUser":           5,
		"PowershareStopReasonStatusReconnecting":   6,
		"PowershareStopReasonStatusAuthentication": 7,
	}
)

func (x PowershareStopReasonStatus) Enum() *PowershareStopReasonStatus {
	p := new(PowershareStopReasonStatus)
	*p = x
	return p
}

func (x PowershareStopReasonStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowershareStopReasonStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[33].Descriptor()
}

func (PowershareStopReasonStatus) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[33]
}

func (x PowershareStopReasonStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowershareStopReasonStatus.Descriptor instead.
func (PowershareStopReasonStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{33}
}

type PowershareTypeStatus int32

const (
	PowershareTypeStatus_PowershareTypeStatusUnknown PowershareTypeStatus = 0
	PowershareTypeStatus_PowershareTypeStatusNone    PowershareTypeStatus = 1
	PowershareTypeStatus_PowershareTypeStatusLoad    PowershareTypeStatus = 2
	PowershareTypeStatus_PowershareTypeStatusHome    PowershareTypeStatus = 3
)

// Enum value maps for PowershareTypeStatus.
var (
	PowershareTypeStatus_name = map[int32]string{
		0: "PowershareTypeStatusUnknown",
		1: "PowershareTypeStatusNone",
		2: "PowershareTypeStatusLoad",
		3: "PowershareTypeStatusHome",
	}
	PowershareTypeStatus_value = map[string]int32{
		"PowershareTypeStatusUnknown": 0,
		"PowershareTypeStatusNone":    1,
		"PowershareTypeStatusLoad":    2,
		"PowershareTypeStatusHome":    3,
	}
)

func (x PowershareTypeStatus) Enum() *PowershareTypeStatus {
	p := new(PowershareTypeStatus)
	*p = x
	return p
}

func (x PowershareTypeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowershareTypeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[34].Descriptor()
}

func (PowershareTypeStatus) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[34]
}

func (x PowershareTypeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowershareTypeStatus.Descriptor instead.
func (PowershareTypeStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{34}
}

type DisplayState int32

const (
	DisplayState_DisplayStateUnknown       DisplayState = 0
	DisplayState_DisplayStateOff           DisplayState = 1
	DisplayState_DisplayStateDim           DisplayState = 2
	DisplayState_DisplayStateAccessory     DisplayState = 3
	DisplayState_DisplayStateOn            DisplayState = 4
	DisplayState_DisplayStateDriving       DisplayState = 5
	DisplayState_DisplayStateCharging      DisplayState = 6
	DisplayState_DisplayStateLock          DisplayState = 7
	DisplayState_DisplayStateSentry        DisplayState = 8
	DisplayState_DisplayStateDog           DisplayState = 9
	DisplayState_DisplayStateEntertainment DisplayState = 10
)

// Enum value maps for DisplayState.
var (
	DisplayState_name = map[int32]string{
		0:  "DisplayStateUnknown",
		1:  "DisplayStateOff",
		2:  "DisplayStateDim",
		3:  "DisplayStateAccessory",
		4:  "DisplayStateOn",
		5:  "DisplayStateDriving",
		6:  "DisplayStateCharging",
		7:  "DisplayStateLock",
		8:  "DisplayStateSentry",
		9:  "DisplayStateDog",
		10: "DisplayStateEntertainment",
	}
	DisplayState_value = map[string]int32{
		"DisplayStateUnknown":       0,
		"DisplayStateOff":           1,
		"DisplayStateDim":           2,
		"DisplayStateAccessory":     3,
		"DisplayStateOn":            4,
		"DisplayStateDriving":       5,
		"DisplayStateCharging":      6,
		"DisplayStateLock":          7,
		"DisplayStateSentry":        8,
		"DisplayStateDog":           9,
		"DisplayStateEntertainment": 10,
	}
)

func (x DisplayState) Enum() *DisplayState {
	p := new(DisplayState)
	*p = x
	return p
}

func (x DisplayState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[35].Descriptor()
}

func (DisplayState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[35]
}

func (x DisplayState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisplayState.Descriptor instead.
func (DisplayState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{35}
}

type DistanceUnit int32

const (
	DistanceUnit_DistanceUnitUnknown    DistanceUnit = 0
	DistanceUnit_DistanceUnitMiles      DistanceUnit = 1
	DistanceUnit_DistanceUnitKilometers DistanceUnit = 2
)

// Enum value maps for DistanceUnit.
var (
	DistanceUnit_name = map[int32]string{
		0: "DistanceUnitUnknown",
		1: "DistanceUnitMiles",
		2: "DistanceUnitKilometers",
	}
	DistanceUnit_value = map[string]int32{
		"DistanceUnitUnknown":    0,
		"DistanceUnitMiles":      1,
		"DistanceUnitKilometers": 2,
	}
)

func (x DistanceUnit) Enum() *DistanceUnit {
	p := new(DistanceUnit)
	*p = x
	return p
}

func (x DistanceUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DistanceUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[36].Descriptor()
}

func (DistanceUnit) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[36]
}

func (x DistanceUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DistanceUnit.Descriptor instead.
func (DistanceUnit) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{36}
}

type TemperatureUnit int32

const (
	TemperatureUnit_TemperatureUnitUnknown    TemperatureUnit = 0
	TemperatureUnit_TemperatureUnitFahrenheit TemperatureUnit = 1
	TemperatureUnit_TemperatureUnitCelsius    TemperatureUnit = 2
)

// Enum value maps for TemperatureUnit.
var (
	TemperatureUnit_name = map[int32]string{
		0: "TemperatureUnitUnknown",
		1: "TemperatureUnitFahrenheit",
		2: "TemperatureUnitCelsius",
	}
	TemperatureUnit_value = map[string]int32{
		"TemperatureUnitUnknown":    0,
		"TemperatureUnitFahrenheit": 1,
		"TemperatureUnitCelsius":    2,
	}
)

func (x TemperatureUnit) Enum() *TemperatureUnit {
	p := new(TemperatureUnit)
	*p = x
	return p
}

func (x TemperatureUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemperatureUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[37].Descriptor()
}

func (TemperatureUnit) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[37]
}

func (x TemperatureUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemperatureUnit.Descriptor instead.
func (TemperatureUnit) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{37}
}

type PressureUnit int32

const (
	PressureUnit_PressureUnitUnknown PressureUnit = 0
	PressureUnit_PressureUnitPsi     PressureUnit = 1
	PressureUnit_PressureUnitBar     PressureUnit = 2
)

// Enum value maps for PressureUnit.
var (
	PressureUnit_name = map[int32]string{
		0: "PressureUnitUnknown",
		1: "PressureUnitPsi",
		2: "PressureUnitBar",
	}
	PressureUnit_value = map[string]int32{
		"PressureUnitUnknown": 0,
		"PressureUnitPsi":     1,
		"PressureUnitBar":     2,
	}
)

func (x PressureUnit) Enum() *PressureUnit {
	p := new(PressureUnit)
	*p = x
	return p
}

func (x PressureUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PressureUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[38].Descriptor()
}

func (PressureUnit) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[38]
}

func (x PressureUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PressureUnit.Descriptor instead.
func (PressureUnit) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{38}
}

type ChargeUnitPreference int32

const (
	ChargeUnitPreference_ChargeUnitUnknown  ChargeUnitPreference = 0
	ChargeUnitPreference_ChargeUnitDistance ChargeUnitPreference = 1
	ChargeUnitPreference_ChargeUnitPercent  ChargeUnitPreference = 2
)

// Enum value maps for ChargeUnitPreference.
var (
	ChargeUnitPreference_name = map[int32]string{
		0: "ChargeUnitUnknown",
		1: "ChargeUnitDistance",
		2: "ChargeUnitPercent",
	}
	ChargeUnitPreference_value = map[string]int32{
		"ChargeUnitUnknown":  0,
		"ChargeUnitDistance": 1,
		"ChargeUnitPercent":  2,
	}
)

func (x ChargeUnitPreference) Enum() *ChargeUnitPreference {
	p := new(ChargeUnitPreference)
	*p = x
	return p
}

func (x ChargeUnitPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeUnitPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[39].Descriptor()
}

func (ChargeUnitPreference) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[39]
}

func (x ChargeUnitPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeUnitPreference.Descriptor instead.
func (ChargeUnitPreference) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{39}
}

// LocationValue is a Datum value type
type LocationValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *LocationValue) Reset() {
	*x = LocationValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationValue) ProtoMessage() {}

func (x *LocationValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationValue.ProtoReflect.Descriptor instead.
func (*LocationValue) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{0}
}

func (x *LocationValue) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LocationValue) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Doors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverFront    bool `protobuf:"varint,1,opt,name=DriverFront,proto3" json:"DriverFront,omitempty"`
	PassengerFront bool `protobuf:"varint,2,opt,name=PassengerFront,proto3" json:"PassengerFront,omitempty"`
	DriverRear     bool `protobuf:"varint,3,opt,name=DriverRear,proto3" json:"DriverRear,omitempty"`
	PassengerRear  bool `protobuf:"varint,4,opt,name=PassengerRear,proto3" json:"PassengerRear,omitempty"`
	TrunkFront     bool `protobuf:"varint,5,opt,name=TrunkFront,proto3" json:"TrunkFront,omitempty"`
	TrunkRear      bool `protobuf:"varint,6,opt,name=TrunkRear,proto3" json:"TrunkRear,omitempty"`
}

func (x *Doors) Reset() {
	*x = Doors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Doors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Doors) ProtoMessage() {}

func (x *Doors) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Doors.ProtoReflect.Descriptor instead.
func (*Doors) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{1}
}

func (x *Doors) GetDriverFront() bool {
	if x != nil {
		return x.DriverFront
	}
	return false
}

func (x *Doors) GetPassengerFront() bool {
	if x != nil {
		return x.PassengerFront
	}
	return false
}

func (x *Doors) GetDriverRear() bool {
	if x != nil {
		return x.DriverRear
	}
	return false
}

func (x *Doors) GetPassengerRear() bool {
	if x != nil {
		return x.PassengerRear
	}
	return false
}

func (x *Doors) GetTrunkFront() bool {
	if x != nil {
		return x.TrunkFront
	}
	return false
}

func (x *Doors) GetTrunkRear() bool {
	if x != nil {
		return x.TrunkRear
	}
	return false
}

type TireLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontLeft             bool `protobuf:"varint,1,opt,name=front_left,json=frontLeft,proto3" json:"front_left,omitempty"`
	FrontRight            bool `protobuf:"varint,2,opt,name=front_right,json=frontRight,proto3" json:"front_right,omitempty"`
	RearLeft              bool `protobuf:"varint,3,opt,name=rear_left,json=rearLeft,proto3" json:"rear_left,omitempty"`
	RearRight             bool `protobuf:"varint,4,opt,name=rear_right,json=rearRight,proto3" json:"rear_right,omitempty"`
	SemiMiddleAxleLeft_2  bool `protobuf:"varint,5,opt,name=semi_middle_axle_left_2,json=semiMiddleAxleLeft2,proto3" json:"semi_middle_axle_left_2,omitempty"`
	SemiMiddleAxleRight_2 bool `protobuf:"varint,6,opt,name=semi_middle_axle_right_2,json=semiMiddleAxleRight2,proto3" json:"semi_middle_axle_right_2,omitempty"`
	SemiRearAxleLeft      bool `protobuf:"varint,7,opt,name=semi_rear_axle_left,json=semiRearAxleLeft,proto3" json:"semi_rear_axle_left,omitempty"`
	SemiRearAxleRight     bool `protobuf:"varint,8,opt,name=semi_rear_axle_right,json=semiRearAxleRight,proto3" json:"semi_rear_axle_right,omitempty"`
	SemiRearAxleLeft_2    bool `protobuf:"varint,9,opt,name=semi_rear_axle_left_2,json=semiRearAxleLeft2,proto3" json:"semi_rear_axle_left_2,omitempty"`
	SemiRearAxleRight_2   bool `protobuf:"varint,10,opt,name=semi_rear_axle_right_2,json=semiRearAxleRight2,proto3" json:"semi_rear_axle_right_2,omitempty"`
}

func (x *TireLocation) Reset() {
	*x = TireLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TireLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TireLocation) ProtoMessage() {}

func (x *TireLocation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TireLocation.ProtoReflect.Descriptor instead.
func (*TireLocation) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{2}
}

func (x *TireLocation) GetFrontLeft() bool {
	if x != nil {
		return x.FrontLeft
	}
	return false
}

func (x *TireLocation) GetFrontRight() bool {
	if x != nil {
		return x.FrontRight
	}
	return false
}

func (x *TireLocation) GetRearLeft() bool {
	if x != nil {
		return x.RearLeft
	}
	return false
}

func (x *TireLocation) GetRearRight() bool {
	if x != nil {
		return x.RearRight
	}
	return false
}

func (x *TireLocation) GetSemiMiddleAxleLeft_2() bool {
	if x != nil {
		return x.SemiMiddleAxleLeft_2
	}
	return false
}

func (x *TireLocation) GetSemiMiddleAxleRight_2() bool {
	if x != nil {
		return x.SemiMiddleAxleRight_2
	}
	return false
}

func (x *TireLocation) GetSemiRearAxleLeft() bool {
	if x != nil {
		return x.SemiRearAxleLeft
	}
	return false
}

func (x *TireLocation) GetSemiRearAxleRight() bool {
	if x != nil {
		return x.SemiRearAxleRight
	}
	return false
}

func (x *TireLocation) GetSemiRearAxleLeft_2() bool {
	if x != nil {
		return x.SemiRearAxleLeft_2
	}
	return false
}

func (x *TireLocation) GetSemiRearAxleRight_2() bool {
	if x != nil {
		return x.SemiRearAxleRight_2
	}
	return false
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
	Second int32 `protobuf:"varint,3,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{3}
}

func (x *Time) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Time) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *Time) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

// Value is a dynamic Datum type.  Most Datums are strings and is the default format
// Note: Fields may have their types updated with different software and vehicle
// versions to optimize for precision or space
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value_StringValue
	//	*Value_IntValue
	//	*Value_LongValue
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_BooleanValue
	//	*Value_LocationValue
	//	*Value_ChargingValue
	//	*Value_ShiftStateValue
	//	*Value_Invalid
	//	*Value_LaneAssistLevelValue
	//	*Value_ScheduledChargingModeValue
	//	*Value_SentryModeStateValue
	//	*Value_SpeedAssistLevelValue
	//	*Value_BmsStateValue
	//	*Value_BuckleStatusValue
	//	*Value_CarTypeValue
	//	*Value_ChargePortValue
	//	*Value_ChargePortLatchValue
	//	*Value_DoorValue
	//	*Value_DriveInverterStateValue
	//	*Value_HvilStatusValue
	//	*Value_WindowStateValue
	//	*Value_SeatFoldPositionValue
	//	*Value_TractorAirStatusValue
	//	*Value_FollowDistanceValue
	//	*Value_ForwardCollisionSensitivityValue
	//	*Value_GuestModeMobileAccessValue
	//	*Value_TrailerAirStatusValue
	//	*Value_TimeValue
	//	*Value_DetailedChargeStateValue
	//	*Value_HvacAutoModeValue
	//	*Value_CabinOverheatProtectionModeValue
	//	*Value_CabinOverheatProtectionTemperatureLimitValue
	//	*Value_DefrostModeValue
	//	*Value_ClimateKeeperModeValue
	//	*Value_HvacPowerValue
	//	*Value_TireLocationValue
	//	*Value_FastChargerValue
	//	*Value_CableTypeValue
	//	*Value_TonneauTentModeValue
	//	*Value_TonneauPositionValue
	//	*Value_PowershareTypeValue
	//	*Value_PowershareStateValue
	//	*Value_PowershareStopReasonValue
	//	*Value_DisplayStateValue
	//	*Value_DistanceUnitValue
	//	*Value_TemperatureUnitValue
	//	*Value_PressureUnitValue
	//	*Value_ChargeUnitPreferenceValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{4}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetIntValue() int32 {
	if x, ok := x.GetValue().(*Value_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Value) GetLongValue() int64 {
	if x, ok := x.GetValue().(*Value_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *Value) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Value) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Value) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*Value_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *Value) GetLocationValue() *LocationValue {
	if x, ok := x.GetValue().(*Value_LocationValue); ok {
		return x.LocationValue
	}
	return nil
}

func (x *Value) GetChargingValue() ChargingState {
	if x, ok := x.GetValue().(*Value_ChargingValue); ok {
		return x.ChargingValue
	}
	return ChargingState_ChargeStateUnknown
}

func (x *Value) GetShiftStateValue() ShiftState {
	if x, ok := x.GetValue().(*Value_ShiftStateValue); ok {
		return x.ShiftStateValue
	}
	return ShiftState_ShiftStateUnknown
}

func (x *Value) GetInvalid() bool {
	if x, ok := x.GetValue().(*Value_Invalid); ok {
		return x.Invalid
	}
	return false
}

func (x *Value) GetLaneAssistLevelValue() LaneAssistLevel {
	if x, ok := x.GetValue().(*Value_LaneAssistLevelValue); ok {
		return x.LaneAssistLevelValue
	}
	return LaneAssistLevel_LaneAssistLevelUnknown
}

func (x *Value) GetScheduledChargingModeValue() ScheduledChargingModeValue {
	if x, ok := x.GetValue().(*Value_ScheduledChargingModeValue); ok {
		return x.ScheduledChargingModeValue
	}
	return ScheduledChargingModeValue_ScheduledChargingModeUnknown
}

func (x *Value) GetSentryModeStateValue() SentryModeState {
	if x, ok := x.GetValue().(*Value_SentryModeStateValue); ok {
		return x.SentryModeStateValue
	}
	return SentryModeState_SentryModeStateUnknown
}

func (x *Value) GetSpeedAssistLevelValue() SpeedAssistLevel {
	if x, ok := x.GetValue().(*Value_SpeedAssistLevelValue); ok {
		return x.SpeedAssistLevelValue
	}
	return SpeedAssistLevel_SpeedAssistLevelUnknown
}

func (x *Value) GetBmsStateValue() BMSStateValue {
	if x, ok := x.GetValue().(*Value_BmsStateValue); ok {
		return x.BmsStateValue
	}
	return BMSStateValue_BMSStateUnknown
}

func (x *Value) GetBuckleStatusValue() BuckleStatus {
	if x, ok := x.GetValue().(*Value_BuckleStatusValue); ok {
		return x.BuckleStatusValue
	}
	return BuckleStatus_BuckleStatusUnknown
}

func (x *Value) GetCarTypeValue() CarTypeValue {
	if x, ok := x.GetValue().(*Value_CarTypeValue); ok {
		return x.CarTypeValue
	}
	return CarTypeValue_CarTypeUnknown
}

func (x *Value) GetChargePortValue() ChargePortValue {
	if x, ok := x.GetValue().(*Value_ChargePortValue); ok {
		return x.ChargePortValue
	}
	return ChargePortValue_ChargePortUnknown
}

func (x *Value) GetChargePortLatchValue() ChargePortLatchValue {
	if x, ok := x.GetValue().(*Value_ChargePortLatchValue); ok {
		return x.ChargePortLatchValue
	}
	return ChargePortLatchValue_ChargePortLatchUnknown
}

func (x *Value) GetDoorValue() *Doors {
	if x, ok := x.GetValue().(*Value_DoorValue); ok {
		return x.DoorValue
	}
	return nil
}

func (x *Value) GetDriveInverterStateValue() DriveInverterState {
	if x, ok := x.GetValue().(*Value_DriveInverterStateValue); ok {
		return x.DriveInverterStateValue
	}
	return DriveInverterState_DriveInverterStateUnknown
}

func (x *Value) GetHvilStatusValue() HvilStatus {
	if x, ok := x.GetValue().(*Value_HvilStatusValue); ok {
		return x.HvilStatusValue
	}
	return HvilStatus_HvilStatusUnknown
}

func (x *Value) GetWindowStateValue() WindowState {
	if x, ok := x.GetValue().(*Value_WindowStateValue); ok {
		return x.WindowStateValue
	}
	return WindowState_WindowStateUnknown
}

func (x *Value) GetSeatFoldPositionValue() SeatFoldPosition {
	if x, ok := x.GetValue().(*Value_SeatFoldPositionValue); ok {
		return x.SeatFoldPositionValue
	}
	return SeatFoldPosition_SeatFoldPositionUnknown
}

func (x *Value) GetTractorAirStatusValue() TractorAirStatus {
	if x, ok := x.GetValue().(*Value_TractorAirStatusValue); ok {
		return x.TractorAirStatusValue
	}
	return TractorAirStatus_TractorAirStatusUnknown
}

func (x *Value) GetFollowDistanceValue() FollowDistance {
	if x, ok := x.GetValue().(*Value_FollowDistanceValue); ok {
		return x.FollowDistanceValue
	}
	return FollowDistance_FollowDistanceUnknown
}

func (x *Value) GetForwardCollisionSensitivityValue() ForwardCollisionSensitivity {
	if x, ok := x.GetValue().(*Value_ForwardCollisionSensitivityValue); ok {
		return x.ForwardCollisionSensitivityValue
	}
	return ForwardCollisionSensitivity_ForwardCollisionSensitivityUnknown
}

func (x *Value) GetGuestModeMobileAccessValue() GuestModeMobileAccess {
	if x, ok := x.GetValue().(*Value_GuestModeMobileAccessValue); ok {
		return x.GuestModeMobileAccessValue
	}
	return GuestModeMobileAccess_GuestModeMobileAccessUnknown
}

func (x *Value) GetTrailerAirStatusValue() TrailerAirStatus {
	if x, ok := x.GetValue().(*Value_TrailerAirStatusValue); ok {
		return x.TrailerAirStatusValue
	}
	return TrailerAirStatus_TrailerAirStatusUnknown
}

func (x *Value) GetTimeValue() *Time {
	if x, ok := x.GetValue().(*Value_TimeValue); ok {
		return x.TimeValue
	}
	return nil
}

func (x *Value) GetDetailedChargeStateValue() DetailedChargeStateValue {
	if x, ok := x.GetValue().(*Value_DetailedChargeStateValue); ok {
		return x.DetailedChargeStateValue
	}
	return DetailedChargeStateValue_DetailedChargeStateUnknown
}

func (x *Value) GetHvacAutoModeValue() HvacAutoModeState {
	if x, ok := x.GetValue().(*Value_HvacAutoModeValue); ok {
		return x.HvacAutoModeValue
	}
	return HvacAutoModeState_HvacAutoModeStateUnknown
}

func (x *Value) GetCabinOverheatProtectionModeValue() CabinOverheatProtectionModeState {
	if x, ok := x.GetValue().(*Value_CabinOverheatProtectionModeValue); ok {
		return x.CabinOverheatProtectionModeValue
	}
	return CabinOverheatProtectionModeState_CabinOverheatProtectionModeStateUnknown
}

func (x *Value) GetCabinOverheatProtectionTemperatureLimitValue() ClimateOverheatProtectionTempLimit {
	if x, ok := x.GetValue().(*Value_CabinOverheatProtectionTemperatureLimitValue); ok {
		return x.CabinOverheatProtectionTemperatureLimitValue
	}
	return ClimateOverheatProtectionTempLimit_ClimateOverheatProtectionTempLimitUnknown
}

func (x *Value) GetDefrostModeValue() DefrostModeState {
	if x, ok := x.GetValue().(*Value_DefrostModeValue); ok {
		return x.DefrostModeValue
	}
	return DefrostModeState_DefrostModeStateUnknown
}

func (x *Value) GetClimateKeeperModeValue() ClimateKeeperModeState {
	if x, ok := x.GetValue().(*Value_ClimateKeeperModeValue); ok {
		return x.ClimateKeeperModeValue
	}
	return ClimateKeeperModeState_ClimateKeeperModeStateUnknown
}

func (x *Value) GetHvacPowerValue() HvacPowerState {
	if x, ok := x.GetValue().(*Value_HvacPowerValue); ok {
		return x.HvacPowerValue
	}
	return HvacPowerState_HvacPowerStateUnknown
}

func (x *Value) GetTireLocationValue() *TireLocation {
	if x, ok := x.GetValue().(*Value_TireLocationValue); ok {
		return x.TireLocationValue
	}
	return nil
}

func (x *Value) GetFastChargerValue() FastCharger {
	if x, ok := x.GetValue().(*Value_FastChargerValue); ok {
		return x.FastChargerValue
	}
	return FastCharger_FastChargerUnknown
}

func (x *Value) GetCableTypeValue() CableType {
	if x, ok := x.GetValue().(*Value_CableTypeValue); ok {
		return x.CableTypeValue
	}
	return CableType_CableTypeUnknown
}

func (x *Value) GetTonneauTentModeValue() TonneauTentModeState {
	if x, ok := x.GetValue().(*Value_TonneauTentModeValue); ok {
		return x.TonneauTentModeValue
	}
	return TonneauTentModeState_TonneauTentModeStateUnknown
}

func (x *Value) GetTonneauPositionValue() TonneauPositionState {
	if x, ok := x.GetValue().(*Value_TonneauPositionValue); ok {
		return x.TonneauPositionValue
	}
	return TonneauPositionState_TonneauPositionStateUnknown
}

func (x *Value) GetPowershareTypeValue() PowershareTypeStatus {
	if x, ok := x.GetValue().(*Value_PowershareTypeValue); ok {
		return x.PowershareTypeValue
	}
	return PowershareTypeStatus_PowershareTypeStatusUnknown
}

func (x *Value) GetPowershareStateValue() PowershareState {
	if x, ok := x.GetValue().(*Value_PowershareStateValue); ok {
		return x.PowershareStateValue
	}
	return PowershareState_PowershareStateUnknown
}

func (x *Value) GetPowershareStopReasonValue() PowershareStopReasonStatus {
	if x, ok := x.GetValue().(*Value_PowershareStopReasonValue); ok {
		return x.PowershareStopReasonValue
	}
	return PowershareStopReasonStatus_PowershareStopReasonStatusUnknown
}

func (x *Value) GetDisplayStateValue() DisplayState {
	if x, ok := x.GetValue().(*Value_DisplayStateValue); ok {
		return x.DisplayStateValue
	}
	return DisplayState_DisplayStateUnknown
}

func (x *Value) GetDistanceUnitValue() DistanceUnit {
	if x, ok := x.GetValue().(*Value_DistanceUnitValue); ok {
		return x.DistanceUnitValue
	}
	return DistanceUnit_DistanceUnitUnknown
}

func (x *Value) GetTemperatureUnitValue() TemperatureUnit {
	if x, ok := x.GetValue().(*Value_TemperatureUnitValue); ok {
		return x.TemperatureUnitValue
	}
	return TemperatureUnit_TemperatureUnitUnknown
}

func (x *Value) GetPressureUnitValue() PressureUnit {
	if x, ok := x.GetValue().(*Value_PressureUnitValue); ok {
		return x.PressureUnitValue
	}
	return PressureUnit_PressureUnitUnknown
}

func (x *Value) GetChargeUnitPreferenceValue() ChargeUnitPreference {
	if x, ok := x.GetValue().(*Value_ChargeUnitPreferenceValue); ok {
		return x.ChargeUnitPreferenceValue
	}
	return ChargeUnitPreference_ChargeUnitUnknown
}

type isValue_Value interface {
	isValue_Value()
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_IntValue struct {
	IntValue int32 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Value_LongValue struct {
	LongValue int64 `protobuf:"varint,3,opt,name=long_value,json=longValue,proto3,oneof"`
}

type Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,4,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Value_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,6,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

type Value_LocationValue struct {
	LocationValue *LocationValue `protobuf:"bytes,7,opt,name=location_value,json=locationValue,proto3,oneof"`
}

type Value_ChargingValue struct {
	ChargingValue ChargingState `protobuf:"varint,8,opt,name=charging_value,json=chargingValue,proto3,enum=telemetry.vehicle_data.ChargingState,oneof"`
}

type Value_ShiftStateValue struct {
	ShiftStateValue ShiftState `protobuf:"varint,9,opt,name=shift_state_value,json=shiftStateValue,proto3,enum=telemetry.vehicle_data.ShiftState,oneof"`
}

type Value_Invalid struct {
	Invalid bool `protobuf:"varint,10,opt,name=invalid,proto3,oneof"`
}

type Value_LaneAssistLevelValue struct {
	LaneAssistLevelValue LaneAssistLevel `protobuf:"varint,11,opt,name=lane_assist_level_value,json=laneAssistLevelValue,proto3,enum=telemetry.vehicle_data.LaneAssistLevel,oneof"`
}

type Value_ScheduledChargingModeValue struct {
	ScheduledChargingModeValue ScheduledChargingModeValue `protobuf:"varint,12,opt,name=scheduled_charging_mode_value,json=scheduledChargingModeValue,proto3,enum=telemetry.vehicle_data.ScheduledChargingModeValue,oneof"`
}

type Value_SentryModeStateValue struct {
	SentryModeStateValue SentryModeState `protobuf:"varint,13,opt,name=sentry_mode_state_value,json=sentryModeStateValue,proto3,enum=telemetry.vehicle_data.SentryModeState,oneof"`
}

type Value_SpeedAssistLevelValue struct {
	SpeedAssistLevelValue SpeedAssistLevel `protobuf:"varint,14,opt,name=speed_assist_level_value,json=speedAssistLevelValue,proto3,enum=telemetry.vehicle_data.SpeedAssistLevel,oneof"`
}

type Value_BmsStateValue struct {
	BmsStateValue BMSStateValue `protobuf:"varint,15,opt,name=bms_state_value,json=bmsStateValue,proto3,enum=telemetry.vehicle_data.BMSStateValue,oneof"`
}

type Value_BuckleStatusValue struct {
	BuckleStatusValue BuckleStatus `protobuf:"varint,16,opt,name=buckle_status_value,json=buckleStatusValue,proto3,enum=telemetry.vehicle_data.BuckleStatus,oneof"`
}

type Value_CarTypeValue struct {
	CarTypeValue CarTypeValue `protobuf:"varint,17,opt,name=car_type_value,json=carTypeValue,proto3,enum=telemetry.vehicle_data.CarTypeValue,oneof"`
}

type Value_ChargePortValue struct {
	ChargePortValue ChargePortValue `protobuf:"varint,18,opt,name=charge_port_value,json=chargePortValue,proto3,enum=telemetry.vehicle_data.ChargePortValue,oneof"`
}

type Value_ChargePortLatchValue struct {
	ChargePortLatchValue ChargePortLatchValue `protobuf:"varint,19,opt,name=charge_port_latch_value,json=chargePortLatchValue,proto3,enum=telemetry.vehicle_data.ChargePortLatchValue,oneof"`
}

type Value_DoorValue struct {
	DoorValue *Doors `protobuf:"bytes,21,opt,name=door_value,json=doorValue,proto3,oneof"`
}

type Value_DriveInverterStateValue struct {
	DriveInverterStateValue DriveInverterState `protobuf:"varint,22,opt,name=drive_inverter_state_value,json=driveInverterStateValue,proto3,enum=telemetry.vehicle_data.DriveInverterState,oneof"`
}

type Value_HvilStatusValue struct {
	HvilStatusValue HvilStatus `protobuf:"varint,23,opt,name=hvil_status_value,json=hvilStatusValue,proto3,enum=telemetry.vehicle_data.HvilStatus,oneof"`
}

type Value_WindowStateValue struct {
	WindowStateValue WindowState `protobuf:"varint,24,opt,name=window_state_value,json=windowStateValue,proto3,enum=telemetry.vehicle_data.WindowState,oneof"`
}

type Value_SeatFoldPositionValue struct {
	SeatFoldPositionValue SeatFoldPosition `protobuf:"varint,25,opt,name=seat_fold_position_value,json=seatFoldPositionValue,proto3,enum=telemetry.vehicle_data.SeatFoldPosition,oneof"`
}

type Value_TractorAirStatusValue struct {
	TractorAirStatusValue TractorAirStatus `protobuf:"varint,26,opt,name=tractor_air_status_value,json=tractorAirStatusValue,proto3,enum=telemetry.vehicle_data.TractorAirStatus,oneof"`
}

type Value_FollowDistanceValue struct {
	FollowDistanceValue FollowDistance `protobuf:"varint,27,opt,name=follow_distance_value,json=followDistanceValue,proto3,enum=telemetry.vehicle_data.FollowDistance,oneof"`
}

type Value_ForwardCollisionSensitivityValue struct {
	ForwardCollisionSensitivityValue ForwardCollisionSensitivity `protobuf:"varint,28,opt,name=forward_collision_sensitivity_value,json=forwardCollisionSensitivityValue,proto3,enum=telemetry.vehicle_data.ForwardCollisionSensitivity,oneof"`
}

type Value_GuestModeMobileAccessValue struct {
	GuestModeMobileAccessValue GuestModeMobileAccess `protobuf:"varint,29,opt,name=guest_mode_mobile_access_value,json=guestModeMobileAccessValue,proto3,enum=telemetry.vehicle_data.GuestModeMobileAccess,oneof"`
}

type Value_TrailerAirStatusValue struct {
	TrailerAirStatusValue TrailerAirStatus `protobuf:"varint,30,opt,name=trailer_air_status_value,json=trailerAirStatusValue,proto3,enum=telemetry.vehicle_data.TrailerAirStatus,oneof"`
}

type Value_TimeValue struct {
	TimeValue *Time `protobuf:"bytes,31,opt,name=time_value,json=timeValue,proto3,oneof"`
}

type Value_DetailedChargeStateValue struct {
	DetailedChargeStateValue DetailedChargeStateValue `protobuf:"varint,32,opt,name=detailed_charge_state_value,json=detailedChargeStateValue,proto3,enum=telemetry.vehicle_data.DetailedChargeStateValue,oneof"`
}

type Value_HvacAutoModeValue struct {
	HvacAutoModeValue HvacAutoModeState `protobuf:"varint,33,opt,name=hvac_auto_mode_value,json=hvacAutoModeValue,proto3,enum=telemetry.vehicle_data.HvacAutoModeState,oneof"`
}

type Value_CabinOverheatProtectionModeValue struct {
	CabinOverheatProtectionModeValue CabinOverheatProtectionModeState `protobuf:"varint,34,opt,name=cabin_overheat_protection_mode_value,json=cabinOverheatProtectionModeValue,proto3,enum=telemetry.vehicle_data.CabinOverheatProtectionModeState,oneof"`
}

type Value_CabinOverheatProtectionTemperatureLimitValue struct {
	CabinOverheatProtectionTemperatureLimitValue ClimateOverheatProtectionTempLimit `protobuf:"varint,35,opt,name=cabin_overheat_protection_temperature_limit_value,json=cabinOverheatProtectionTemperatureLimitValue,proto3,enum=telemetry.vehicle_data.ClimateOverheatProtectionTempLimit,oneof"`
}

type Value_DefrostModeValue struct {
	DefrostModeValue DefrostModeState `protobuf:"varint,36,opt,name=defrost_mode_value,json=defrostModeValue,proto3,enum=telemetry.vehicle_data.DefrostModeState,oneof"`
}

type Value_ClimateKeeperModeValue struct {
	ClimateKeeperModeValue ClimateKeeperModeState `protobuf:"varint,37,opt,name=climate_keeper_mode_value,json=climateKeeperModeValue,proto3,enum=telemetry.vehicle_data.ClimateKeeperModeState,oneof"`
}

type Value_HvacPowerValue struct {
	HvacPowerValue HvacPowerState `protobuf:"varint,38,opt,name=hvac_power_value,json=hvacPowerValue,proto3,enum=telemetry.vehicle_data.HvacPowerState,oneof"`
}

type Value_TireLocationValue struct {
	TireLocationValue *TireLocation `protobuf:"bytes,39,opt,name=tire_location_value,json=tireLocationValue,proto3,oneof"`
}

type Value_FastChargerValue struct {
	FastChargerValue FastCharger `protobuf:"varint,40,opt,name=fast_charger_value,json=fastChargerValue,proto3,enum=telemetry.vehicle_data.FastCharger,oneof"`
}

type Value_CableTypeValue struct {
	CableTypeValue CableType `protobuf:"varint,41,opt,name=cable_type_value,json=cableTypeValue,proto3,enum=telemetry.vehicle_data.CableType,oneof"`
}

type Value_TonneauTentModeValue struct {
	TonneauTentModeValue TonneauTentModeState `protobuf:"varint,42,opt,name=tonneau_tent_mode_value,json=tonneauTentModeValue,proto3,enum=telemetry.vehicle_data.TonneauTentModeState,oneof"`
}

type Value_TonneauPositionValue struct {
	TonneauPositionValue TonneauPositionState `protobuf:"varint,43,opt,name=tonneau_position_value,json=tonneauPositionValue,proto3,enum=telemetry.vehicle_data.TonneauPositionState,oneof"`
}

type Value_PowershareTypeValue struct {
	PowershareTypeValue PowershareTypeStatus `protobuf:"varint,44,opt,name=powershare_type_value,json=powershareTypeValue,proto3,enum=telemetry.vehicle_data.PowershareTypeStatus,oneof"`
}

type Value_PowershareStateValue struct {
	PowershareStateValue PowershareState `protobuf:"varint,45,opt,name=powershare_state_value,json=powershareStateValue,proto3,enum=telemetry.vehicle_data.PowershareState,oneof"`
}

type Value_PowershareStopReasonValue struct {
	PowershareStopReasonValue PowershareStopReasonStatus `protobuf:"varint,46,opt,name=powershare_stop_reason_value,json=powershareStopReasonValue,proto3,enum=telemetry.vehicle_data.PowershareStopReasonStatus,oneof"`
}

type Value_DisplayStateValue struct {
	DisplayStateValue DisplayState `protobuf:"varint,47,opt,name=display_state_value,json=displayStateValue,proto3,enum=telemetry.vehicle_data.DisplayState,oneof"`
}

type Value_DistanceUnitValue struct {
	DistanceUnitValue DistanceUnit `protobuf:"varint,48,opt,name=distance_unit_value,json=distanceUnitValue,proto3,enum=telemetry.vehicle_data.DistanceUnit,oneof"`
}

type Value_TemperatureUnitValue struct {
	TemperatureUnitValue TemperatureUnit `protobuf:"varint,49,opt,name=temperature_unit_value,json=temperatureUnitValue,proto3,enum=telemetry.vehicle_data.TemperatureUnit,oneof"`
}

type Value_PressureUnitValue struct {
	PressureUnitValue PressureUnit `protobuf:"varint,50,opt,name=pressure_unit_value,json=pressureUnitValue,proto3,enum=telemetry.vehicle_data.PressureUnit,oneof"`
}

type Value_ChargeUnitPreferenceValue struct {
	ChargeUnitPreferenceValue ChargeUnitPreference `protobuf:"varint,51,opt,name=charge_unit_preference_value,json=chargeUnitPreferenceValue,proto3,enum=telemetry.vehicle_data.ChargeUnitPreference,oneof"`
}

func (*Value_StringValue) isValue_Value() {}

func (*Value_IntValue) isValue_Value() {}

func (*Value_LongValue) isValue_Value() {}

func (*Value_FloatValue) isValue_Value() {}

func (*Value_DoubleValue) isValue_Value() {}

func (*Value_BooleanValue) isValue_Value() {}

func (*Value_LocationValue) isValue_Value() {}

func (*Value_ChargingValue) isValue_Value() {}

func (*Value_ShiftStateValue) isValue_Value() {}

func (*Value_Invalid) isValue_Value() {}

func (*Value_LaneAssistLevelValue) isValue_Value() {}

func (*Value_ScheduledChargingModeValue) isValue_Value() {}

func (*Value_SentryModeStateValue) isValue_Value() {}

func (*Value_SpeedAssistLevelValue) isValue_Value() {}

func (*Value_BmsStateValue) isValue_Value() {}

func (*Value_BuckleStatusValue) isValue_Value() {}

func (*Value_CarTypeValue) isValue_Value() {}

func (*Value_ChargePortValue) isValue_Value() {}

func (*Value_ChargePortLatchValue) isValue_Value() {}

func (*Value_DoorValue) isValue_Value() {}

func (*Value_DriveInverterStateValue) isValue_Value() {}

func (*Value_HvilStatusValue) isValue_Value() {}

func (*Value_WindowStateValue) isValue_Value() {}

func (*Value_SeatFoldPositionValue) isValue_Value() {}

func (*Value_TractorAirStatusValue) isValue_Value() {}

func (*Value_FollowDistanceValue) isValue_Value() {}

func (*Value_ForwardCollisionSensitivityValue) isValue_Value() {}

func (*Value_GuestModeMobileAccessValue) isValue_Value() {}

func (*Value_TrailerAirStatusValue) isValue_Value() {}

func (*Value_TimeValue) isValue_Value() {}

func (*Value_DetailedChargeStateValue) isValue_Value() {}

func (*Value_HvacAutoModeValue) isValue_Value() {}

func (*Value_CabinOverheatProtectionModeValue) isValue_Value() {}

func (*Value_CabinOverheatProtectionTemperatureLimitValue) isValue_Value() {}

func (*Value_DefrostModeValue) isValue_Value() {}

func (*Value_ClimateKeeperModeValue) isValue_Value() {}

func (*Value_HvacPowerValue) isValue_Value() {}

func (*Value_TireLocationValue) isValue_Value() {}

func (*Value_FastChargerValue) isValue_Value() {}

func (*Value_CableTypeValue) isValue_Value() {}

func (*Value_TonneauTentModeValue) isValue_Value() {}

func (*Value_TonneauPositionValue) isValue_Value() {}

func (*Value_PowershareTypeValue) isValue_Value() {}

func (*Value_PowershareStateValue) isValue_Value() {}

func (*Value_PowershareStopReasonValue) isValue_Value() {}

func (*Value_DisplayStateValue) isValue_Value() {}

func (*Value_DistanceUnitValue) isValue_Value() {}

func (*Value_TemperatureUnitValue) isValue_Value() {}

func (*Value_PressureUnitValue) isValue_Value() {}

func (*Value_ChargeUnitPreferenceValue) isValue_Value() {}

// Datum represents a single field and its value
type Datum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   Field  `protobuf:"varint,1,opt,name=key,proto3,enum=telemetry.vehicle_data.Field" json:"key,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Datum) Reset() {
	*x = Datum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datum) ProtoMessage() {}

func (x *Datum) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datum.ProtoReflect.Descriptor instead.
func (*Datum) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{5}
}

func (x *Datum) GetKey() Field {
	if x != nil {
		return x.Key
	}
	return Field_Unknown
}

func (x *Datum) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Payload holds a collection of values, and may not have a vin
type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*Datum               `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Vin       string                 `protobuf:"bytes,3,opt,name=vin,proto3" json:"vin,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{6}
}

func (x *Payload) GetData() []*Datum {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Payload) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Payload) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

var File_protos_vehicle_data_proto protoreflect.FileDescriptor

var file_protos_vehicle_data_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22,
	0xd5, 0x01, 0x0a, 0x05, 0x44, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x52, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x52, 0x65, 0x61, 0x72, 0x22, 0xbe, 0x03, 0x0a, 0x0c, 0x54, 0x69, 0x72, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x72,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x72, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x5f, 0x61, 0x78, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x32, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x6d, 0x69, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x41, 0x78, 0x6c, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x32, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x65,
	0x6d, 0x69, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x61, 0x78, 0x6c, 0x65, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x65,
	0x6d, 0x69, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x41, 0x78, 0x6c, 0x65, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x32, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x72, 0x65, 0x61, 0x72, 0x5f,
	0x61, 0x78, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x65, 0x6d, 0x69, 0x52, 0x65, 0x61, 0x72, 0x41, 0x78, 0x6c, 0x65, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x72, 0x65, 0x61, 0x72, 0x5f, 0x61,
	0x78, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x73, 0x65, 0x6d, 0x69, 0x52, 0x65, 0x61, 0x72, 0x41, 0x78, 0x6c, 0x65, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x72, 0x65, 0x61, 0x72, 0x5f,
	0x61, 0x78, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x73, 0x65, 0x6d, 0x69, 0x52, 0x65, 0x61, 0x72, 0x41, 0x78, 0x6c, 0x65, 0x4c,
	0x65, 0x66, 0x74, 0x32, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x72, 0x65, 0x61,
	0x72, 0x5f, 0x61, 0x78, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x32, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x6d, 0x69, 0x52, 0x65, 0x61, 0x72, 0x41, 0x78,
	0x6c, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x32, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x22, 0xe3, 0x22, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x60, 0x0a, 0x17, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x61,
	0x6e, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x77, 0x0a, 0x1d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x1a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x60, 0x0a, 0x17, 0x73,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a,
	0x18, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x62, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x62, 0x75, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x11, 0x62, 0x75, 0x63, 0x6b, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x63,
	0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x65, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74,
	0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x6f, 0x6f, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6f,
	0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x69, 0x0a, 0x1a, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x68, 0x76, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x76, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x76, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6c,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63,
	0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x15, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x73, 0x0a, 0x1e, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x1a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a,
	0x18, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x71, 0x0a, 0x1b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x68, 0x76, 0x61, 0x63, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x76, 0x61, 0x63,
	0x41, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x68, 0x76, 0x61, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x24, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x62, 0x69, 0x6e,
	0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x20, 0x63,
	0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x31, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65,
	0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x2c, 0x63, 0x61, 0x62, 0x69, 0x6e,
	0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x66,
	0x72, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x64, 0x65, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x6b, 0x0a, 0x19, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52,
	0x0a, 0x10, 0x68, 0x76, 0x61, 0x63, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x68, 0x76, 0x61, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x74, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x46, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x66,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x4d, 0x0a, 0x10, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x65,
	0x0a, 0x17, 0x74, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x5f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75,
	0x54, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x74, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x54, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x74, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5f, 0x0a, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x75, 0x0a, 0x1c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x19, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x56, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x6f, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x75, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x69, 0x6e, 0x2a, 0xc3, 0x2b, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x6d, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x64, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x6f, 0x63,
	0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x43, 0x44, 0x43, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x65, 0x61, 0x72, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x65, 0x64, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6b,
	0x65, 0x50, 0x65, 0x64, 0x61, 0x6c, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x48, 0x65, 0x61, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x54, 0x52, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x41, 0x78,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69,
	0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x10, 0x11, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x69, 0x53, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x10, 0x12,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x56, 0x42, 0x61, 0x74, 0x52, 0x10, 0x13, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x69, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x15,
	0x12, 0x0c, 0x0a, 0x08, 0x47, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x16, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x70, 0x73, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x17, 0x12, 0x16,
	0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x78, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x75, 0x6d, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x69,
	0x6e, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x10, 0x1c, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x10,
	0x1d, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x4d, 0x69, 0x6e, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x69, 0x6e, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x76,
	0x69, 0x6c, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x43, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x43, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10,
	0x23, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x10, 0x24, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x25, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x63,
	0x10, 0x26, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x27, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x73,
	0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x28, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x29, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x2b, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x2c, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x2d, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x2e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x2f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x30, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x70, 0x73, 0x10, 0x31, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x32, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x10, 0x33, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x64, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x34, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x35, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x10,
	0x36, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x4f, 0x6e, 0x10, 0x37, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f,
	0x75, 0x67, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x74, 0x10, 0x38,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x10, 0x39, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x3a, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x3b, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x10, 0x3c, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x10, 0x3d, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x10, 0x3e, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x70, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x10, 0x3f, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x40, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x41, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x42, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x70, 0x68, 0x10,
	0x43, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x44, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x70, 0x6d, 0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x10, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x70, 0x6d, 0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x46, 0x72, 0x10, 0x46, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x70, 0x6d, 0x73, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6c, 0x10, 0x47, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x70,
	0x6d, 0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x72, 0x10, 0x48, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x65, 0x6d, 0x69, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x70, 0x6d, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x31, 0x4c, 0x30, 0x10, 0x49, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x65, 0x6d, 0x69, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x70, 0x6d, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x31, 0x4c, 0x31, 0x10, 0x4a, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x65, 0x6d, 0x69, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x70, 0x6d, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x31, 0x52, 0x30, 0x10, 0x4b, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x65, 0x6d, 0x69, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x70, 0x6d, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x31, 0x52, 0x31, 0x10, 0x4c, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x65, 0x6d, 0x69, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x70, 0x6d, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x32, 0x4c, 0x30, 0x10, 0x4d, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x65, 0x6d, 0x69, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x70, 0x6d, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x32, 0x4c, 0x31, 0x10, 0x4e, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x65, 0x6d, 0x69, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x70, 0x6d, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x32, 0x52, 0x30, 0x10, 0x4f, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x65, 0x6d, 0x69, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x70, 0x6d, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x32, 0x52, 0x31, 0x10, 0x50, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x70, 0x6d, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x10, 0x51, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x70, 0x6d, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x10, 0x52, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x70, 0x6d, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x6c, 0x10, 0x53, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x70, 0x6d, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x72, 0x10, 0x54, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x55, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x56, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x66,
	0x74, 0x10, 0x57, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x58, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x74,
	0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x59,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x5a, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x61,
	0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x10, 0x5b, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x43,
	0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x5c, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x10, 0x5d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x61, 0x74, 0x42, 0x65, 0x6c, 0x74, 0x10, 0x5e, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x42, 0x65, 0x6c, 0x74, 0x10,
	0x5f, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x60, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x65, 0x6d,
	0x69, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x61, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x62, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x63, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x32, 0x10, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x72,
	0x75, 0x69, 0x73, 0x65, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x10, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x55, 0x73, 0x65, 0x64, 0x10, 0x66, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x65, 0x64, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x10, 0x67, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x65, 0x6d, 0x69, 0x74, 0x72, 0x75, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x6b, 0x42, 0x72, 0x61, 0x6b, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x68, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x65, 0x6d, 0x69,
	0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x6b,
	0x42, 0x72, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x69, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x64, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x10, 0x6a,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x6b, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x10, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x10, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x10, 0x6e, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x70, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x71, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x72, 0x69,
	0x6d, 0x10, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x66, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x10, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x10, 0x75, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x63, 0x68, 0x10, 0x76, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x31, 0x10, 0x77, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x32,
	0x10, 0x78, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x33, 0x10, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x34, 0x10, 0x7a, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x7b,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x7c, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x61, 0x69, 0x72, 0x65,
	0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x46,
	0x6f, 0x62, 0x51, 0x74, 0x79, 0x10, 0x7d, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x72, 0x75, 0x69, 0x73,
	0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x10,
	0x7e, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x10, 0x7f, 0x12,
	0x23, 0x0a, 0x1e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x69, 0x6d,
	0x65, 0x10, 0x80, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x81, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x82, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x4c, 0x61,
	0x6e, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x76, 0x6f, 0x69, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x83, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x84, 0x01, 0x12, 0x21, 0x0a,
	0x1c, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x72, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x10, 0x85, 0x01,
	0x12, 0x1e, 0x0a, 0x19, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x10, 0x86, 0x01,
	0x12, 0x0d, 0x0a, 0x08, 0x44, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x10, 0x87, 0x01, 0x12,
	0x0f, 0x0a, 0x0a, 0x44, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x45, 0x4c, 0x10, 0x88, 0x01,
	0x12, 0x0f, 0x0a, 0x0a, 0x44, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x45, 0x52, 0x10, 0x89,
	0x01, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x69, 0x48, 0x65, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x54,
	0x46, 0x10, 0x8a, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x69, 0x48, 0x65, 0x61, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x54, 0x52, 0x45, 0x4c, 0x10, 0x8b, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x69, 0x48,
	0x65, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x52, 0x45, 0x52, 0x10, 0x8c, 0x01, 0x12, 0x11,
	0x0a, 0x0c, 0x44, 0x69, 0x41, 0x78, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x46, 0x10, 0x8d,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x69, 0x41, 0x78, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x52, 0x45, 0x4c, 0x10, 0x8e, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x69, 0x41, 0x78, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x45, 0x52, 0x10, 0x8f, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x44,
	0x69, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x43, 0x6d, 0x64, 0x10,
	0x90, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x69, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x10, 0x91, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x69, 0x54, 0x6f,
	0x72, 0x71, 0x75, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x10, 0x92, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x44, 0x69, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x52, 0x45, 0x4c, 0x10, 0x93, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x69, 0x54, 0x6f, 0x72, 0x71,
	0x75, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x45, 0x52, 0x10, 0x94, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x44, 0x69, 0x53, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x46, 0x10,
	0x95, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x69, 0x53, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x52, 0x45, 0x4c, 0x10, 0x96, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x45, 0x52, 0x10, 0x97, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x44, 0x69, 0x56, 0x42, 0x61, 0x74, 0x46, 0x10, 0x98, 0x01, 0x12, 0x0e, 0x0a, 0x09,
	0x44, 0x69, 0x56, 0x42, 0x61, 0x74, 0x52, 0x45, 0x4c, 0x10, 0x99, 0x01, 0x12, 0x0e, 0x0a, 0x09,
	0x44, 0x69, 0x56, 0x42, 0x61, 0x74, 0x52, 0x45, 0x52, 0x10, 0x9a, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x44, 0x69, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x10,
	0x9b, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x69, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x45, 0x4c, 0x10, 0x9c, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x69,
	0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x45, 0x52, 0x10,
	0x9d, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x9e, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x9f, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x42, 0x4d,
	0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xa0, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xa1, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x31, 0x10, 0xa2, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x10, 0xa3, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x69, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x54, 0x52, 0x10, 0xa4, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x69, 0x49, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x54, 0x46, 0x10, 0xa5, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x69, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x52, 0x45, 0x4c, 0x10, 0xa6, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x44, 0x69, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x52, 0x45, 0x52,
	0x10, 0xa7, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x35, 0x10, 0xa8, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x36, 0x10, 0xa9, 0x01, 0x12, 0x13, 0x0a,
	0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x37, 0x10,
	0xaa, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x38, 0x10, 0xab, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x39, 0x10, 0xac, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x31, 0x30, 0x10,
	0xad, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x31, 0x31, 0x10, 0xae, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x31, 0x32, 0x10, 0xaf, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x31,
	0x33, 0x10, 0xb0, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x31, 0x34, 0x10, 0xb1, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x31, 0x35, 0x10, 0xb2, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xb3, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x61,
	0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0xb4, 0x01, 0x12, 0x2c, 0x0a, 0x27,
	0x43, 0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xb5, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x10, 0xb6, 0x01, 0x12, 0x17,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x6e, 0x10, 0xb7, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0xb8, 0x01, 0x12, 0x16, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xb9, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0xba, 0x01, 0x12, 0x1e, 0x0a, 0x19,
	0x44, 0x65, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0xbb, 0x01, 0x12, 0x10, 0x0a, 0x0b,
	0x44, 0x65, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0xbc, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x10, 0xbd, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xbe, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x10,
	0xbf, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x54, 0x72, 0x69,
	0x70, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x10, 0xc0, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x46,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0xc1,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x48, 0x6f, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xc2, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x48,
	0x6f, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x10, 0xc3, 0x01,
	0x12, 0x12, 0x0a, 0x0d, 0x48, 0x76, 0x61, 0x63, 0x41, 0x43, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0xc4, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x48, 0x76, 0x61, 0x63, 0x41, 0x75, 0x74, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x10, 0xc5, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x48, 0x76, 0x61, 0x63, 0x46,
	0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x10, 0xc6, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x48, 0x76,
	0x61, 0x63, 0x46, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xc7, 0x01, 0x12, 0x1f,
	0x0a, 0x1a, 0x48, 0x76, 0x61, 0x63, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xc8, 0x01, 0x12,
	0x0e, 0x0a, 0x09, 0x48, 0x76, 0x61, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0xc9, 0x01, 0x12,
	0x20, 0x0a, 0x1b, 0x48, 0x76, 0x61, 0x63, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xca,
	0x01, 0x12, 0x1e, 0x0a, 0x19, 0x48, 0x76, 0x61, 0x63, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x10, 0xcb,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x48, 0x76, 0x61, 0x63, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10,
	0xcc, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x4f, 0x66, 0x66, 0x72, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x61, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x10, 0xcd, 0x01, 0x12,
	0x18, 0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x10, 0xce, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e,
	0x65, 0x6f, 0x75, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x57, 0x10, 0xcf, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0xd0, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0xd1, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0xd2, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x72, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x48, 0x76, 0x61, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0xd3, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x72, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x73, 0x10, 0xd4, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0xd5,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x10, 0xd6, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x10, 0xd7, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xd8,
	0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x10, 0xd9, 0x01, 0x12, 0x2e, 0x0a,
	0x29, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xda, 0x01, 0x12, 0x25, 0x0a,
	0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x10, 0xdb, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xdc, 0x01,
	0x12, 0x17, 0x0a, 0x12, 0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x4f, 0x70, 0x65, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x10, 0xdd, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x6f, 0x6e,
	0x6e, 0x65, 0x61, 0x75, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xde, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x54, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0xdf, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x70, 0x6d, 0x73, 0x48, 0x61, 0x72,
	0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x10, 0xe0, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x54, 0x70, 0x6d, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x10, 0xe1, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0xe2, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x57, 0x68,
	0x65, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0xe3, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x57, 0x69,
	0x70, 0x65, 0x72, 0x48, 0x65, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0xe4,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x6f,
	0x6d, 0x65, 0x10, 0xe5, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x10, 0xe6, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x10, 0xe7,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x10, 0xe8, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x10, 0xe9, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x32, 0x34, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0xea, 0x01,
	0x12, 0x1c, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x72, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x10, 0xeb, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x10, 0xec, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x4c, 0x65, 0x66, 0x74, 0x10, 0xed, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x6c, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0xee, 0x01, 0x2a, 0xbf, 0x01, 0x0a, 0x0d,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x06, 0x2a, 0x82, 0x02,
	0x0a, 0x18, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10,
	0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x10, 0x06, 0x2a, 0x91, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x4e, 0x41, 0x10, 0x06, 0x2a, 0xbe, 0x01, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x31, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x33, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x35, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x36,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x37, 0x10, 0x07, 0x2a, 0xdc, 0x01, 0x0a, 0x1b, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x66,
	0x66, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x10, 0x03,
	0x12, 0x24, 0x0a, 0x20, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45,
	0x61, 0x72, 0x6c, 0x79, 0x10, 0x04, 0x2a, 0xe4, 0x06, 0x0a, 0x15, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x20, 0x0a, 0x1c, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x30, 0x0a,
	0x2c, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x73, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x05, 0x12,
	0x2c, 0x0a, 0x28, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x69, 0x6e, 0x67, 0x42, 0x4c, 0x45, 0x4b, 0x65, 0x79, 0x73, 0x10, 0x06, 0x12, 0x29, 0x0a,
	0x25, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x4f, 0x66, 0x66, 0x10, 0x08, 0x12, 0x35, 0x0a, 0x31, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x09, 0x12, 0x2e, 0x0a,
	0x2a, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x31, 0x0a,
	0x2d, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x0b,
	0x12, 0x2c, 0x0a, 0x28, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x10, 0x0c, 0x12, 0x2b,
	0x0a, 0x27, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x2f, 0x0a, 0x2b, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x26, 0x0a, 0x22,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x51, 0x52, 0x43, 0x6f,
	0x64, 0x65, 0x10, 0x0f, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x77, 0x69,
	0x70, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x10, 0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x51, 0x52, 0x43, 0x6f, 0x64,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x11, 0x12, 0x31, 0x0a, 0x2d, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72,
	0x65, 0x64, 0x4e, 0x65, 0x77, 0x42, 0x4c, 0x45, 0x4b, 0x65, 0x79, 0x10, 0x12, 0x2a, 0x7d, 0x0a,
	0x0f, 0x4c, 0x61, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x61, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x4c, 0x61, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x61, 0x6e, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x61, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x10, 0x03, 0x2a, 0xa1, 0x01, 0x0a,
	0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x42, 0x79, 0x10, 0x03,
	0x2a, 0xc6, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6d, 0x65, 0x64, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x77,
	0x61, 0x72, 0x65, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x10, 0x06, 0x2a, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x69, 0x6d, 0x65, 0x10, 0x03, 0x2a, 0xe7, 0x01,
	0x0a, 0x0d, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4d, 0x53,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x46, 0x45, 0x49, 0x4d, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4d, 0x53, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x06, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x6c, 0x64, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x4e, 0x41, 0x10, 0x0a, 0x2a, 0x74, 0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x75, 0x63, 0x6b, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x75, 0x63, 0x6b, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x6e, 0x6c, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x75, 0x63, 0x6b, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x75, 0x63, 0x6b, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x9b, 0x01,
	0x0a, 0x0c, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x58, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x33, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x59, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x6d, 0x69, 0x54, 0x72, 0x75,
	0x63, 0x6b, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x10, 0x06, 0x2a, 0x71, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x55, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x55, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x42, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x43, 0x53, 0x10, 0x04, 0x2a, 0xa2,
	0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74,
	0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x74, 0x63, 0x68, 0x53, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69,
	0x73, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x67,
	0x61, 0x67, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x10, 0x04, 0x2a, 0xcd, 0x01, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x72, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x05, 0x2a, 0x4a, 0x0a, 0x0a, 0x48, 0x76, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x76, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x76, 0x69, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x48, 0x76, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x4b, 0x10, 0x02, 0x2a,
	0x71, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x10, 0x03, 0x2a, 0xc2, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x74, 0x46,
	0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x65,
	0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x65, 0x61,
	0x74, 0x46, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x8e, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x69,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x68,
	0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10, 0x06, 0x2a, 0xa8, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x4e,
	0x41, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x41, 0x69,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x41, 0x69, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x10, 0x04, 0x12, 0x30,
	0x0a, 0x2c, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x10, 0x05,
	0x12, 0x32, 0x0a, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x41, 0x69, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x41,
	0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x10, 0x07, 0x2a, 0x69, 0x0a, 0x11, 0x48, 0x76, 0x61, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x76, 0x61, 0x63,
	0x41, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x76, 0x61, 0x63, 0x41, 0x75,
	0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x48, 0x76, 0x61, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x10, 0x02, 0x2a, 0xcd,
	0x01, 0x0a, 0x20, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72,
	0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x61, 0x62,
	0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x10,
	0x02, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65,
	0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x03, 0x2a, 0xd8,
	0x01, 0x0a, 0x22, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65,
	0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x69, 0x67, 0x68, 0x10, 0x01,
	0x12, 0x2c, 0x0a, 0x28, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x68,
	0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x29,
	0x0a, 0x25, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x77, 0x10, 0x03, 0x2a, 0x9c, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x65, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x65, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x66, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x65, 0x66,
	0x72, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x65, 0x66, 0x6f, 0x67, 0x10, 0x04, 0x2a, 0xb8, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x67,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x10, 0x04, 0x2a, 0x9b, 0x01, 0x0a, 0x0e, 0x48, 0x76, 0x61, 0x63, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x76, 0x61, 0x63, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x76, 0x61, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x76, 0x61, 0x63,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x48, 0x76, 0x61, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x21,
	0x0a, 0x1d, 0x48, 0x76, 0x61, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x10,
	0x04, 0x2a, 0xed, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x75, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x43, 0x48, 0x41, 0x64, 0x65, 0x4d, 0x4f, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x46, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x47, 0x42, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x41, 0x43, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x69, 0x72, 0x65, 0x43, 0x41, 0x4e, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4d, 0x43, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x69,
	0x72, 0x65, 0x43, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x07, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x4e, 0x41, 0x10,
	0x08, 0x2a, 0x7f, 0x0a, 0x09, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x45, 0x43, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x41, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x42, 0x5f, 0x41, 0x43, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x42, 0x5f, 0x44, 0x43, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x4e, 0x41,
	0x10, 0x05, 0x2a, 0xb9, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x54, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x54, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x54, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x54, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x54, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x54, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x04, 0x2a, 0xc2,
	0x01, 0x0a, 0x14, 0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x6f, 0x6e, 0x6e, 0x65,
	0x61, 0x75, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x6f, 0x6e, 0x6e,
	0x65, 0x61, 0x75, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x6f, 0x6e,
	0x6e, 0x65, 0x61, 0x75, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x6f, 0x6e,
	0x6e, 0x65, 0x61, 0x75, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x54, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x4f, 0x70, 0x65,
	0x6e, 0x10, 0x04, 0x2a, 0xe7, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x06, 0x2a, 0xd8, 0x02,
	0x0a, 0x1a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x4f, 0x43, 0x54, 0x6f, 0x6f, 0x4c, 0x6f, 0x77, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x10, 0x05, 0x12, 0x2a,
	0x0a, 0x26, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x2a, 0x91, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x10, 0x03, 0x2a, 0x95, 0x02, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x6d, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44,
	0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x08,
	0x12, 0x13, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x67, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x0a, 0x2a, 0x5a, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x69, 0x6c,
	0x65, 0x73, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x4b, 0x69, 0x6c, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x10, 0x02,
	0x2a, 0x68, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x61, 0x68, 0x72, 0x65, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x10, 0x02, 0x2a, 0x51, 0x0a, 0x0c, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x73, 0x69, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x61, 0x72, 0x10, 0x02, 0x2a, 0x5c, 0x0a,
	0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x42, 0x2f, 0x5a, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x6d,
	0x6f, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_vehicle_data_proto_rawDescOnce sync.Once
	file_protos_vehicle_data_proto_rawDescData = file_protos_vehicle_data_proto_rawDesc
)

func file_protos_vehicle_data_proto_rawDescGZIP() []byte {
	file_protos_vehicle_data_proto_rawDescOnce.Do(func() {
		file_protos_vehicle_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_vehicle_data_proto_rawDescData)
	})
	return file_protos_vehicle_data_proto_rawDescData
}

var file_protos_vehicle_data_proto_enumTypes = make([]protoimpl.EnumInfo, 40)
var file_protos_vehicle_data_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_protos_vehicle_data_proto_goTypes = []interface{}{
	(Field)(0),                              // 0: telemetry.vehicle_data.Field
	(ChargingState)(0),                      // 1: telemetry.vehicle_data.ChargingState
	(DetailedChargeStateValue)(0),           // 2: telemetry.vehicle_data.DetailedChargeStateValue
	(ShiftState)(0),                         // 3: telemetry.vehicle_data.ShiftState
	(FollowDistance)(0),                     // 4: telemetry.vehicle_data.FollowDistance
	(ForwardCollisionSensitivity)(0),        // 5: telemetry.vehicle_data.ForwardCollisionSensitivity
	(GuestModeMobileAccess)(0),              // 6: telemetry.vehicle_data.GuestModeMobileAccess
	(LaneAssistLevel)(0),                    // 7: telemetry.vehicle_data.LaneAssistLevel
	(ScheduledChargingModeValue)(0),         // 8: telemetry.vehicle_data.ScheduledChargingModeValue
	(SentryModeState)(0),                    // 9: telemetry.vehicle_data.SentryModeState
	(SpeedAssistLevel)(0),                   // 10: telemetry.vehicle_data.SpeedAssistLevel
	(BMSStateValue)(0),                      // 11: telemetry.vehicle_data.BMSStateValue
	(BuckleStatus)(0),                       // 12: telemetry.vehicle_data.BuckleStatus
	(CarTypeValue)(0),                       // 13: telemetry.vehicle_data.CarTypeValue
	(ChargePortValue)(0),                    // 14: telemetry.vehicle_data.ChargePortValue
	(ChargePortLatchValue)(0),               // 15: telemetry.vehicle_data.ChargePortLatchValue
	(DriveInverterState)(0),                 // 16: telemetry.vehicle_data.DriveInverterState
	(HvilStatus)(0),                         // 17: telemetry.vehicle_data.HvilStatus
	(WindowState)(0),                        // 18: telemetry.vehicle_data.WindowState
	(SeatFoldPosition)(0),                   // 19: telemetry.vehicle_data.SeatFoldPosition
	(TractorAirStatus)(0),                   // 20: telemetry.vehicle_data.TractorAirStatus
	(TrailerAirStatus)(0),                   // 21: telemetry.vehicle_data.TrailerAirStatus
	(HvacAutoModeState)(0),                  // 22: telemetry.vehicle_data.HvacAutoModeState
	(CabinOverheatProtectionModeState)(0),   // 23: telemetry.vehicle_data.CabinOverheatProtectionModeState
	(ClimateOverheatProtectionTempLimit)(0), // 24: telemetry.vehicle_data.ClimateOverheatProtectionTempLimit
	(DefrostModeState)(0),                   // 25: telemetry.vehicle_data.DefrostModeState
	(ClimateKeeperModeState)(0),             // 26: telemetry.vehicle_data.ClimateKeeperModeState
	(HvacPowerState)(0),                     // 27: telemetry.vehicle_data.HvacPowerState
	(FastCharger)(0),                        // 28: telemetry.vehicle_data.FastCharger
	(CableType)(0),                          // 29: telemetry.vehicle_data.CableType
	(TonneauTentModeState)(0),               // 30: telemetry.vehicle_data.TonneauTentModeState
	(TonneauPositionState)(0),               // 31: telemetry.vehicle_data.TonneauPositionState
	(PowershareState)(0),                    // 32: telemetry.vehicle_data.PowershareState
	(PowershareStopReasonStatus)(0),         // 33: telemetry.vehicle_data.PowershareStopReasonStatus
	(PowershareTypeStatus)(0),               // 34: telemetry.vehicle_data.PowershareTypeStatus
	(DisplayState)(0),                       // 35: telemetry.vehicle_data.DisplayState
	(DistanceUnit)(0),                       // 36: telemetry.vehicle_data.DistanceUnit
	(TemperatureUnit)(0),                    // 37: telemetry.vehicle_data.TemperatureUnit
	(PressureUnit)(0),                       // 38: telemetry.vehicle_data.PressureUnit
	(ChargeUnitPreference)(0),               // 39: telemetry.vehicle_data.ChargeUnitPreference
	(*LocationValue)(nil),                   // 40: telemetry.vehicle_data.LocationValue
	(*Doors)(nil),                           // 41: telemetry.vehicle_data.Doors
	(*TireLocation)(nil),                    // 42: telemetry.vehicle_data.TireLocation
	(*Time)(nil),                            // 43: telemetry.vehicle_data.Time
	(*Value)(nil),                           // 44: telemetry.vehicle_data.Value
	(*Datum)(nil),                           // 45: telemetry.vehicle_data.Datum
	(*Payload)(nil),                         // 46: telemetry.vehicle_data.Payload
	(*timestamppb.Timestamp)(nil),           // 47: google.protobuf.Timestamp
}
var file_protos_vehicle_data_proto_depIdxs = []int32{
	40, // 0: telemetry.vehicle_data.Value.location_value:type_name -> telemetry.vehicle_data.LocationValue
	1,  // 1: telemetry.vehicle_data.Value.charging_value:type_name -> telemetry.vehicle_data.ChargingState
	3,  // 2: telemetry.vehicle_data.Value.shift_state_value:type_name -> telemetry.vehicle_data.ShiftState
	7,  // 3: telemetry.vehicle_data.Value.lane_assist_level_value:type_name -> telemetry.vehicle_data.LaneAssistLevel
	8,  // 4: telemetry.vehicle_data.Value.scheduled_charging_mode_value:type_name -> telemetry.vehicle_data.ScheduledChargingModeValue
	9,  // 5: telemetry.vehicle_data.Value.sentry_mode_state_value:type_name -> telemetry.vehicle_data.SentryModeState
	10, // 6: telemetry.vehicle_data.Value.speed_assist_level_value:type_name -> telemetry.vehicle_data.SpeedAssistLevel
	11, // 7: telemetry.vehicle_data.Value.bms_state_value:type_name -> telemetry.vehicle_data.BMSStateValue
	12, // 8: telemetry.vehicle_data.Value.buckle_status_value:type_name -> telemetry.vehicle_data.BuckleStatus
	13, // 9: telemetry.vehicle_data.Value.car_type_value:type_name -> telemetry.vehicle_data.CarTypeValue
	14, // 10: telemetry.vehicle_data.Value.charge_port_value:type_name -> telemetry.vehicle_data.ChargePortValue
	15, // 11: telemetry.vehicle_data.Value.charge_port_latch_value:type_name -> telemetry.vehicle_data.ChargePortLatchValue
	41, // 12: telemetry.vehicle_data.Value.door_value:type_name -> telemetry.vehicle_data.Doors
	16, // 13: telemetry.vehicle_data.Value.drive_inverter_state_value:type_name -> telemetry.vehicle_data.DriveInverterState
	17, // 14: telemetry.vehicle_data.Value.hvil_status_value:type_name -> telemetry.vehicle_data.HvilStatus
	18, // 15: telemetry.vehicle_data.Value.window_state_value:type_name -> telemetry.vehicle_data.WindowState
	19, // 16: telemetry.vehicle_data.Value.seat_fold_position_value:type_name -> telemetry.vehicle_data.SeatFoldPosition
	20, // 17: telemetry.vehicle_data.Value.tractor_air_status_value:type_name -> telemetry.vehicle_data.TractorAirStatus
	4,  // 18: telemetry.vehicle_data.Value.follow_distance_value:type_name -> telemetry.vehicle_data.FollowDistance
	5,  // 19: telemetry.vehicle_data.Value.forward_collision_sensitivity_value:type_name -> telemetry.vehicle_data.ForwardCollisionSensitivity
	6,  // 20: telemetry.vehicle_data.Value.guest_mode_mobile_access_value:type_name -> telemetry.vehicle_data.GuestModeMobileAccess
	21, // 21: telemetry.vehicle_data.Value.trailer_air_status_value:type_name -> telemetry.vehicle_data.TrailerAirStatus
	43, // 22: telemetry.vehicle_data.Value.time_value:type_name -> telemetry.vehicle_data.Time
	2,  // 23: telemetry.vehicle_data.Value.detailed_charge_state_value:type_name -> telemetry.vehicle_data.DetailedChargeStateValue
	22, // 24: telemetry.vehicle_data.Value.hvac_auto_mode_value:type_name -> telemetry.vehicle_data.HvacAutoModeState
	23, // 25: telemetry.vehicle_data.Value.cabin_overheat_protection_mode_value:type_name -> telemetry.vehicle_data.CabinOverheatProtectionModeState
	24, // 26: telemetry.vehicle_data.Value.cabin_overheat_protection_temperature_limit_value:type_name -> telemetry.vehicle_data.ClimateOverheatProtectionTempLimit
	25, // 27: telemetry.vehicle_data.Value.defrost_mode_value:type_name -> telemetry.vehicle_data.DefrostModeState
	26, // 28: telemetry.vehicle_data.Value.climate_keeper_mode_value:type_name -> telemetry.vehicle_data.ClimateKeeperModeState
	27, // 29: telemetry.vehicle_data.Value.hvac_power_value:type_name -> telemetry.vehicle_data.HvacPowerState
	42, // 30: telemetry.vehicle_data.Value.tire_location_value:type_name -> telemetry.vehicle_data.TireLocation
	28, // 31: telemetry.vehicle_data.Value.fast_charger_value:type_name -> telemetry.vehicle_data.FastCharger
	29, // 32: telemetry.vehicle_data.Value.cable_type_value:type_name -> telemetry.vehicle_data.CableType
	30, // 33: telemetry.vehicle_data.Value.tonneau_tent_mode_value:type_name -> telemetry.vehicle_data.TonneauTentModeState
	31, // 34: telemetry.vehicle_data.Value.tonneau_position_value:type_name -> telemetry.vehicle_data.TonneauPositionState
	34, // 35: telemetry.vehicle_data.Value.powershare_type_value:type_name -> telemetry.vehicle_data.PowershareTypeStatus
	32, // 36: telemetry.vehicle_data.Value.powershare_state_value:type_name -> telemetry.vehicle_data.PowershareState
	33, // 37: telemetry.vehicle_data.Value.powershare_stop_reason_value:type_name -> telemetry.vehicle_data.PowershareStopReasonStatus
	35, // 38: telemetry.vehicle_data.Value.display_state_value:type_name -> telemetry.vehicle_data.DisplayState
	36, // 39: telemetry.vehicle_data.Value.distance_unit_value:type_name -> telemetry.vehicle_data.DistanceUnit
	37, // 40: telemetry.vehicle_data.Value.temperature_unit_value:type_name -> telemetry.vehicle_data.TemperatureUnit
	38, // 41: telemetry.vehicle_data.Value.pressure_unit_value:type_name -> telemetry.vehicle_data.PressureUnit
	39, // 42: telemetry.vehicle_data.Value.charge_unit_preference_value:type_name -> telemetry.vehicle_data.ChargeUnitPreference
	0,  // 43: telemetry.vehicle_data.Datum.key:type_name -> telemetry.vehicle_data.Field
	44, // 44: telemetry.vehicle_data.Datum.value:type_name -> telemetry.vehicle_data.Value
	45, // 45: telemetry.vehicle_data.Payload.data:type_name -> telemetry.vehicle_data.Datum
	47, // 46: telemetry.vehicle_data.Payload.created_at:type_name -> google.protobuf.Timestamp
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_protos_vehicle_data_proto_init() }
func file_protos_vehicle_data_proto_init() {
	if File_protos_vehicle_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_vehicle_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vehicle_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Doors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vehicle_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TireLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vehicle_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vehicle_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vehicle_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vehicle_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_vehicle_data_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Value_StringValue)(nil),
		(*Value_IntValue)(nil),
		(*Value_LongValue)(nil),
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_BooleanValue)(nil),
		(*Value_LocationValue)(nil),
		(*Value_ChargingValue)(nil),
		(*Value_ShiftStateValue)(nil),
		(*Value_Invalid)(nil),
		(*Value_LaneAssistLevelValue)(nil),
		(*Value_ScheduledChargingModeValue)(nil),
		(*Value_SentryModeStateValue)(nil),
		(*Value_SpeedAssistLevelValue)(nil),
		(*Value_BmsStateValue)(nil),
		(*Value_BuckleStatusValue)(nil),
		(*Value_CarTypeValue)(nil),
		(*Value_ChargePortValue)(nil),
		(*Value_ChargePortLatchValue)(nil),
		(*Value_DoorValue)(nil),
		(*Value_DriveInverterStateValue)(nil),
		(*Value_HvilStatusValue)(nil),
		(*Value_WindowStateValue)(nil),
		(*Value_SeatFoldPositionValue)(nil),
		(*Value_TractorAirStatusValue)(nil),
		(*Value_FollowDistanceValue)(nil),
		(*Value_ForwardCollisionSensitivityValue)(nil),
		(*Value_GuestModeMobileAccessValue)(nil),
		(*Value_TrailerAirStatusValue)(nil),
		(*Value_TimeValue)(nil),
		(*Value_DetailedChargeStateValue)(nil),
		(*Value_HvacAutoModeValue)(nil),
		(*Value_CabinOverheatProtectionModeValue)(nil),
		(*Value_CabinOverheatProtectionTemperatureLimitValue)(nil),
		(*Value_DefrostModeValue)(nil),
		(*Value_ClimateKeeperModeValue)(nil),
		(*Value_HvacPowerValue)(nil),
		(*Value_TireLocationValue)(nil),
		(*Value_FastChargerValue)(nil),
		(*Value_CableTypeValue)(nil),
		(*Value_TonneauTentModeValue)(nil),
		(*Value_TonneauPositionValue)(nil),
		(*Value_PowershareTypeValue)(nil),
		(*Value_PowershareStateValue)(nil),
		(*Value_PowershareStopReasonValue)(nil),
		(*Value_DisplayStateValue)(nil),
		(*Value_DistanceUnitValue)(nil),
		(*Value_TemperatureUnitValue)(nil),
		(*Value_PressureUnitValue)(nil),
		(*Value_ChargeUnitPreferenceValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_vehicle_data_proto_rawDesc,
			NumEnums:      40,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_vehicle_data_proto_goTypes,
		DependencyIndexes: file_protos_vehicle_data_proto_depIdxs,
		EnumInfos:         file_protos_vehicle_data_proto_enumTypes,
		MessageInfos:      file_protos_vehicle_data_proto_msgTypes,
	}.Build()
	File_protos_vehicle_data_proto = out.File
	file_protos_vehicle_data_proto_rawDesc = nil
	file_protos_vehicle_data_proto_goTypes = nil
	file_protos_vehicle_data_proto_depIdxs = nil
}
