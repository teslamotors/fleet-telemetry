// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: protos/vehicle_data.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Field int32

const (
	Field_Unknown                        Field = 0
	Field_DriveRail                      Field = 1
	Field_ChargeState                    Field = 2
	Field_BmsFullchargecomplete          Field = 3
	Field_VehicleSpeed                   Field = 4
	Field_Odometer                       Field = 5
	Field_PackVoltage                    Field = 6
	Field_PackCurrent                    Field = 7
	Field_Soc                            Field = 8
	Field_DCDCEnable                     Field = 9
	Field_Gear                           Field = 10
	Field_IsolationResistance            Field = 11
	Field_PedalPosition                  Field = 12
	Field_BrakePedal                     Field = 13
	Field_DiState                        Field = 14
	Field_DiPcbt                         Field = 15
	Field_DiRpm                          Field = 16
	Field_DiTorquemotor                  Field = 17
	Field_DiHeatsinkt                    Field = 18
	Field_DiVbat                         Field = 19
	Field_DiMotorcurrent                 Field = 20
	Field_Location                       Field = 21
	Field_GpsState                       Field = 22
	Field_GpsHeading                     Field = 23
	Field_NumBrickVoltageMax             Field = 24
	Field_BrickVoltageMax                Field = 25
	Field_NumBrickVoltageMin             Field = 26
	Field_BrickVoltageMin                Field = 27
	Field_NumModuleTempMax               Field = 28
	Field_ModuleTempMax                  Field = 29
	Field_NumModuleTempMin               Field = 30
	Field_ModuleTempMin                  Field = 31
	Field_RatedRange                     Field = 32
	Field_Hvil                           Field = 33
	Field_DCChargingEnergyIn             Field = 34
	Field_DCChargingPower                Field = 35
	Field_ACChargingEnergyIn             Field = 36
	Field_ACChargingPower                Field = 37
	Field_ChargeLimitSoc                 Field = 38
	Field_FastChargerPresent             Field = 39
	Field_EstBatteryRange                Field = 40
	Field_IdealBatteryRange              Field = 41
	Field_BatteryLevel                   Field = 42
	Field_TimeToFullCharge               Field = 43
	Field_ScheduledChargingStartTime     Field = 44
	Field_ScheduledChargingPending       Field = 45
	Field_ScheduledDepartureTime         Field = 46
	Field_PreconditioningEnabled         Field = 47
	Field_ScheduledChargingMode          Field = 48
	Field_ChargeAmps                     Field = 49
	Field_ChargeEnableRequest            Field = 50
	Field_ChargerPhases                  Field = 51
	Field_ChargePortColdWeatherMode      Field = 52
	Field_ChargeCurrentRequest           Field = 53
	Field_ChargeCurrentRequestMax        Field = 54
	Field_BatteryHeaterOn                Field = 55
	Field_NotEnoughPowerToHeat           Field = 56
	Field_SuperchargerSessionTripPlanner Field = 57
	Field_DoorState                      Field = 58
	Field_Locked                         Field = 59
	Field_FdWindow                       Field = 60
	Field_FpWindow                       Field = 61
	Field_RdWindow                       Field = 62
	Field_RpWindow                       Field = 63
	Field_VehicleName                    Field = 64
	Field_SentryMode                     Field = 65
	Field_SpeedLimitMode                 Field = 66
	Field_CurrentLimitMph                Field = 67
	Field_Version                        Field = 68
	Field_TpmsPressureFl                 Field = 69
	Field_TpmsPressureFr                 Field = 70
	Field_TpmsPressureRl                 Field = 71
	Field_TpmsPressureRr                 Field = 72
	Field_TmpsPressureRlo                Field = 73
	Field_TmpsPressureRro                Field = 74
	Field_TmpsPressureR2l                Field = 75
	Field_TmpsPressureR2r                Field = 76
	Field_TmpsPressureR2lo               Field = 77
	Field_TmpsPressureR2ro               Field = 78
	Field_TpmsLastSeenPressureTimeFl     Field = 79
	Field_TpmsLastSeenPressureTimeFr     Field = 80
	Field_TpmsLastSeenPressureTimeRl     Field = 81
	Field_TpmsLastSeenPressureTimeRr     Field = 82
	Field_InsideTemp                     Field = 83
	Field_SeatHeaterLeft                 Field = 84
	Field_SeatHeaterRight                Field = 85
	Field_AutoSeatClimateLeft            Field = 86
	Field_AutoSeatClimateRight           Field = 87
	Field_SeatHeaterRearLeft             Field = 88
	Field_SeatHeaterRearRight            Field = 89
	Field_SeatHeaterRearCenter           Field = 90
	Field_DriverSeatBelt                 Field = 91
)

// Enum value maps for Field.
var (
	Field_name = map[int32]string{
		0:  "Unknown",
		1:  "DriveRail",
		2:  "ChargeState",
		3:  "BmsFullchargecomplete",
		4:  "VehicleSpeed",
		5:  "Odometer",
		6:  "PackVoltage",
		7:  "PackCurrent",
		8:  "Soc",
		9:  "DCDCEnable",
		10: "Gear",
		11: "IsolationResistance",
		12: "PedalPosition",
		13: "BrakePedal",
		14: "DiState",
		15: "DiPcbt",
		16: "DiRpm",
		17: "DiTorquemotor",
		18: "DiHeatsinkt",
		19: "DiVbat",
		20: "DiMotorcurrent",
		21: "Location",
		22: "GpsState",
		23: "GpsHeading",
		24: "NumBrickVoltageMax",
		25: "BrickVoltageMax",
		26: "NumBrickVoltageMin",
		27: "BrickVoltageMin",
		28: "NumModuleTempMax",
		29: "ModuleTempMax",
		30: "NumModuleTempMin",
		31: "ModuleTempMin",
		32: "RatedRange",
		33: "Hvil",
		34: "DCChargingEnergyIn",
		35: "DCChargingPower",
		36: "ACChargingEnergyIn",
		37: "ACChargingPower",
		38: "ChargeLimitSoc",
		39: "FastChargerPresent",
		40: "EstBatteryRange",
		41: "IdealBatteryRange",
		42: "BatteryLevel",
		43: "TimeToFullCharge",
		44: "ScheduledChargingStartTime",
		45: "ScheduledChargingPending",
		46: "ScheduledDepartureTime",
		47: "PreconditioningEnabled",
		48: "ScheduledChargingMode",
		49: "ChargeAmps",
		50: "ChargeEnableRequest",
		51: "ChargerPhases",
		52: "ChargePortColdWeatherMode",
		53: "ChargeCurrentRequest",
		54: "ChargeCurrentRequestMax",
		55: "BatteryHeaterOn",
		56: "NotEnoughPowerToHeat",
		57: "SuperchargerSessionTripPlanner",
		58: "DoorState",
		59: "Locked",
		60: "FdWindow",
		61: "FpWindow",
		62: "RdWindow",
		63: "RpWindow",
		64: "VehicleName",
		65: "SentryMode",
		66: "SpeedLimitMode",
		67: "CurrentLimitMph",
		68: "Version",
		69: "TpmsPressureFl",
		70: "TpmsPressureFr",
		71: "TpmsPressureRl",
		72: "TpmsPressureRr",
		73: "TmpsPressureRlo",
		74: "TmpsPressureRro",
		75: "TmpsPressureR2l",
		76: "TmpsPressureR2r",
		77: "TmpsPressureR2lo",
		78: "TmpsPressureR2ro",
		79: "TpmsLastSeenPressureTimeFl",
		80: "TpmsLastSeenPressureTimeFr",
		81: "TpmsLastSeenPressureTimeRl",
		82: "TpmsLastSeenPressureTimeRr",
		83: "InsideTemp",
		84: "SeatHeaterLeft",
		85: "SeatHeaterRight",
		86: "AutoSeatClimateLeft",
		87: "AutoSeatClimateRight",
		88: "SeatHeaterRearLeft",
		89: "SeatHeaterRearRight",
		90: "SeatHeaterRearCenter",
		91: "DriverSeatBelt",
	}
	Field_value = map[string]int32{
		"Unknown":                        0,
		"DriveRail":                      1,
		"ChargeState":                    2,
		"BmsFullchargecomplete":          3,
		"VehicleSpeed":                   4,
		"Odometer":                       5,
		"PackVoltage":                    6,
		"PackCurrent":                    7,
		"Soc":                            8,
		"DCDCEnable":                     9,
		"Gear":                           10,
		"IsolationResistance":            11,
		"PedalPosition":                  12,
		"BrakePedal":                     13,
		"DiState":                        14,
		"DiPcbt":                         15,
		"DiRpm":                          16,
		"DiTorquemotor":                  17,
		"DiHeatsinkt":                    18,
		"DiVbat":                         19,
		"DiMotorcurrent":                 20,
		"Location":                       21,
		"GpsState":                       22,
		"GpsHeading":                     23,
		"NumBrickVoltageMax":             24,
		"BrickVoltageMax":                25,
		"NumBrickVoltageMin":             26,
		"BrickVoltageMin":                27,
		"NumModuleTempMax":               28,
		"ModuleTempMax":                  29,
		"NumModuleTempMin":               30,
		"ModuleTempMin":                  31,
		"RatedRange":                     32,
		"Hvil":                           33,
		"DCChargingEnergyIn":             34,
		"DCChargingPower":                35,
		"ACChargingEnergyIn":             36,
		"ACChargingPower":                37,
		"ChargeLimitSoc":                 38,
		"FastChargerPresent":             39,
		"EstBatteryRange":                40,
		"IdealBatteryRange":              41,
		"BatteryLevel":                   42,
		"TimeToFullCharge":               43,
		"ScheduledChargingStartTime":     44,
		"ScheduledChargingPending":       45,
		"ScheduledDepartureTime":         46,
		"PreconditioningEnabled":         47,
		"ScheduledChargingMode":          48,
		"ChargeAmps":                     49,
		"ChargeEnableRequest":            50,
		"ChargerPhases":                  51,
		"ChargePortColdWeatherMode":      52,
		"ChargeCurrentRequest":           53,
		"ChargeCurrentRequestMax":        54,
		"BatteryHeaterOn":                55,
		"NotEnoughPowerToHeat":           56,
		"SuperchargerSessionTripPlanner": 57,
		"DoorState":                      58,
		"Locked":                         59,
		"FdWindow":                       60,
		"FpWindow":                       61,
		"RdWindow":                       62,
		"RpWindow":                       63,
		"VehicleName":                    64,
		"SentryMode":                     65,
		"SpeedLimitMode":                 66,
		"CurrentLimitMph":                67,
		"Version":                        68,
		"TpmsPressureFl":                 69,
		"TpmsPressureFr":                 70,
		"TpmsPressureRl":                 71,
		"TpmsPressureRr":                 72,
		"TmpsPressureRlo":                73,
		"TmpsPressureRro":                74,
		"TmpsPressureR2l":                75,
		"TmpsPressureR2r":                76,
		"TmpsPressureR2lo":               77,
		"TmpsPressureR2ro":               78,
		"TpmsLastSeenPressureTimeFl":     79,
		"TpmsLastSeenPressureTimeFr":     80,
		"TpmsLastSeenPressureTimeRl":     81,
		"TpmsLastSeenPressureTimeRr":     82,
		"InsideTemp":                     83,
		"SeatHeaterLeft":                 84,
		"SeatHeaterRight":                85,
		"AutoSeatClimateLeft":            86,
		"AutoSeatClimateRight":           87,
		"SeatHeaterRearLeft":             88,
		"SeatHeaterRearRight":            89,
		"SeatHeaterRearCenter":           90,
		"DriverSeatBelt":                 91,
	}
)

func (x Field) Enum() *Field {
	p := new(Field)
	*p = x
	return p
}

func (x Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[0].Descriptor()
}

func (Field) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[0]
}

func (x Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field.Descriptor instead.
func (Field) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{0}
}

// ChargingState are the charging options
type ChargingState int32

const (
	ChargingState_ChargeStateUnknown      ChargingState = 0
	ChargingState_ChargeStateDisconnected ChargingState = 1
	ChargingState_ChargeStateNoPower      ChargingState = 2
	ChargingState_ChargeStateStarting     ChargingState = 3
	ChargingState_ChargeStateCharging     ChargingState = 4
	ChargingState_ChargeStateComplete     ChargingState = 5
	ChargingState_ChargeStateStopped      ChargingState = 6
)

// Enum value maps for ChargingState.
var (
	ChargingState_name = map[int32]string{
		0: "ChargeStateUnknown",
		1: "ChargeStateDisconnected",
		2: "ChargeStateNoPower",
		3: "ChargeStateStarting",
		4: "ChargeStateCharging",
		5: "ChargeStateComplete",
		6: "ChargeStateStopped",
	}
	ChargingState_value = map[string]int32{
		"ChargeStateUnknown":      0,
		"ChargeStateDisconnected": 1,
		"ChargeStateNoPower":      2,
		"ChargeStateStarting":     3,
		"ChargeStateCharging":     4,
		"ChargeStateComplete":     5,
		"ChargeStateStopped":      6,
	}
)

func (x ChargingState) Enum() *ChargingState {
	p := new(ChargingState)
	*p = x
	return p
}

func (x ChargingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[1].Descriptor()
}

func (ChargingState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[1]
}

func (x ChargingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingState.Descriptor instead.
func (ChargingState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{1}
}

// ShiftState are the gear options
type ShiftState int32

const (
	ShiftState_ShiftStateUnknown ShiftState = 0
	ShiftState_ShiftStateInvalid ShiftState = 1
	ShiftState_ShiftStateP       ShiftState = 2
	ShiftState_ShiftStateR       ShiftState = 3
	ShiftState_ShiftStateD       ShiftState = 4
	ShiftState_ShiftStateN       ShiftState = 5
	ShiftState_ShiftStateSNA     ShiftState = 6
)

// Enum value maps for ShiftState.
var (
	ShiftState_name = map[int32]string{
		0: "ShiftStateUnknown",
		1: "ShiftStateInvalid",
		2: "ShiftStateP",
		3: "ShiftStateR",
		4: "ShiftStateD",
		5: "ShiftStateN",
		6: "ShiftStateSNA",
	}
	ShiftState_value = map[string]int32{
		"ShiftStateUnknown": 0,
		"ShiftStateInvalid": 1,
		"ShiftStateP":       2,
		"ShiftStateR":       3,
		"ShiftStateD":       4,
		"ShiftStateN":       5,
		"ShiftStateSNA":     6,
	}
)

func (x ShiftState) Enum() *ShiftState {
	p := new(ShiftState)
	*p = x
	return p
}

func (x ShiftState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShiftState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vehicle_data_proto_enumTypes[2].Descriptor()
}

func (ShiftState) Type() protoreflect.EnumType {
	return &file_protos_vehicle_data_proto_enumTypes[2]
}

func (x ShiftState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShiftState.Descriptor instead.
func (ShiftState) EnumDescriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{2}
}

// LocationValue is a Datum value type
type LocationValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *LocationValue) Reset() {
	*x = LocationValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationValue) ProtoMessage() {}

func (x *LocationValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationValue.ProtoReflect.Descriptor instead.
func (*LocationValue) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{0}
}

func (x *LocationValue) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LocationValue) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// Value is a dynamic Datum type.  Most Datums are strings and is the default format
// Note: Fields may have their types updated with different software and vehicle
// versions to optimize for precision or space
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value_StringValue
	//	*Value_IntValue
	//	*Value_LongValue
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_BooleanValue
	//	*Value_LocationValue
	//	*Value_ChargingValue
	//	*Value_ShiftStateValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{1}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetIntValue() int32 {
	if x, ok := x.GetValue().(*Value_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Value) GetLongValue() int64 {
	if x, ok := x.GetValue().(*Value_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *Value) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Value) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Value) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*Value_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *Value) GetLocationValue() *LocationValue {
	if x, ok := x.GetValue().(*Value_LocationValue); ok {
		return x.LocationValue
	}
	return nil
}

func (x *Value) GetChargingValue() ChargingState {
	if x, ok := x.GetValue().(*Value_ChargingValue); ok {
		return x.ChargingValue
	}
	return ChargingState_ChargeStateUnknown
}

func (x *Value) GetShiftStateValue() ShiftState {
	if x, ok := x.GetValue().(*Value_ShiftStateValue); ok {
		return x.ShiftStateValue
	}
	return ShiftState_ShiftStateUnknown
}

type isValue_Value interface {
	isValue_Value()
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_IntValue struct {
	IntValue int32 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Value_LongValue struct {
	LongValue int64 `protobuf:"varint,3,opt,name=long_value,json=longValue,proto3,oneof"`
}

type Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,4,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Value_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,6,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

type Value_LocationValue struct {
	LocationValue *LocationValue `protobuf:"bytes,7,opt,name=location_value,json=locationValue,proto3,oneof"`
}

type Value_ChargingValue struct {
	ChargingValue ChargingState `protobuf:"varint,8,opt,name=charging_value,json=chargingValue,proto3,enum=telemetry.vehicle_data.ChargingState,oneof"`
}

type Value_ShiftStateValue struct {
	ShiftStateValue ShiftState `protobuf:"varint,9,opt,name=shift_state_value,json=shiftStateValue,proto3,enum=telemetry.vehicle_data.ShiftState,oneof"`
}

func (*Value_StringValue) isValue_Value() {}

func (*Value_IntValue) isValue_Value() {}

func (*Value_LongValue) isValue_Value() {}

func (*Value_FloatValue) isValue_Value() {}

func (*Value_DoubleValue) isValue_Value() {}

func (*Value_BooleanValue) isValue_Value() {}

func (*Value_LocationValue) isValue_Value() {}

func (*Value_ChargingValue) isValue_Value() {}

func (*Value_ShiftStateValue) isValue_Value() {}

// Datum represents a single field and its value
type Datum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   Field  `protobuf:"varint,1,opt,name=key,proto3,enum=telemetry.vehicle_data.Field" json:"key,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Datum) Reset() {
	*x = Datum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datum) ProtoMessage() {}

func (x *Datum) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datum.ProtoReflect.Descriptor instead.
func (*Datum) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{2}
}

func (x *Datum) GetKey() Field {
	if x != nil {
		return x.Key
	}
	return Field_Unknown
}

func (x *Datum) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Payload holds a collection of values, and may not have a vin
type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*Datum               `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Vin       string                 `protobuf:"bytes,3,opt,name=vin,proto3" json:"vin,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vehicle_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vehicle_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_protos_vehicle_data_proto_rawDescGZIP(), []int{3}
}

func (x *Payload) GetData() []*Datum {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Payload) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Payload) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

var File_protos_vehicle_data_proto protoreflect.FileDescriptor

var file_protos_vehicle_data_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22,
	0xd6, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a,
	0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x76, 0x69, 0x6e, 0x2a, 0xdf, 0x0e, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x52, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x6d,
	0x73, 0x46, 0x75, 0x6c, 0x6c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x64, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x6f, 0x63, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x43, 0x44, 0x43, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x09,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x65, 0x61, 0x72, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x65, 0x64, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x50,
	0x65, 0x64, 0x61, 0x6c, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x69, 0x50, 0x63, 0x62, 0x74, 0x10, 0x0f, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x69, 0x52, 0x70, 0x6d, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69,
	0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x10, 0x11, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x69, 0x48, 0x65, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x74, 0x10, 0x12, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x69, 0x56, 0x62, 0x61, 0x74, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x69,
	0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x14, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08,
	0x47, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x70,
	0x73, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x75,
	0x6d, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78,
	0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x78, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x42, 0x72,
	0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x10, 0x1a, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d,
	0x69, 0x6e, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x10, 0x1c, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x10, 0x1d, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x75, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x69,
	0x6e, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x4d, 0x69, 0x6e, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x76, 0x69, 0x6c, 0x10, 0x21,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x43, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x43, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x23, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x43, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x49, 0x6e, 0x10, 0x24, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x25, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x63, 0x10, 0x26, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x10, 0x27, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x73, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x64, 0x65, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x10, 0x29, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x75,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x2b, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x2c, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x2d, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x10, 0x2e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x2f,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x30, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x70, 0x73, 0x10, 0x31, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x32, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x73, 0x10, 0x33, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x64, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x10, 0x34, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x35,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x10, 0x36, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x6e,
	0x10, 0x37, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x74, 0x10, 0x38, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x10, 0x39,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x3a, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x3b, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x10, 0x3c, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x70, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x10, 0x3d, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x64, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x10, 0x3e, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x10, 0x3f, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x10, 0x40, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0x41, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x42, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x70, 0x68, 0x10, 0x43, 0x12, 0x0b, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x44, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x70,
	0x6d, 0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x10, 0x45, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x70, 0x6d, 0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x46, 0x72,
	0x10, 0x46, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x70, 0x6d, 0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x6c, 0x10, 0x47, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x70, 0x6d, 0x73, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x72, 0x10, 0x48, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x6d,
	0x70, 0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6c, 0x6f, 0x10, 0x49, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x6d, 0x70, 0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x72, 0x6f, 0x10, 0x4a, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x6d, 0x70, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x32, 0x6c, 0x10, 0x4b, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x6d, 0x70,
	0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x32, 0x72, 0x10, 0x4c, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x6d, 0x70, 0x73, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x32,
	0x6c, 0x6f, 0x10, 0x4d, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x6d, 0x70, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x32, 0x72, 0x6f, 0x10, 0x4e, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x70,
	0x6d, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x10, 0x4f, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x70,
	0x6d, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x10, 0x50, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x70,
	0x6d, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x6c, 0x10, 0x51, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x70,
	0x6d, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x72, 0x10, 0x52, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x53, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65,
	0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x54, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x10, 0x55, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x43,
	0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x56, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x10, 0x57, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x58, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x59, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x74, 0x48,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0x5a, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x42,
	0x65, 0x6c, 0x74, 0x10, 0x5b, 0x2a, 0xbf, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x06, 0x2a, 0x91, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x4e, 0x41, 0x10, 0x06, 0x42, 0x2f, 0x5a, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x6d,
	0x6f, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_vehicle_data_proto_rawDescOnce sync.Once
	file_protos_vehicle_data_proto_rawDescData = file_protos_vehicle_data_proto_rawDesc
)

func file_protos_vehicle_data_proto_rawDescGZIP() []byte {
	file_protos_vehicle_data_proto_rawDescOnce.Do(func() {
		file_protos_vehicle_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_vehicle_data_proto_rawDescData)
	})
	return file_protos_vehicle_data_proto_rawDescData
}

var file_protos_vehicle_data_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_vehicle_data_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_protos_vehicle_data_proto_goTypes = []interface{}{
	(Field)(0),                    // 0: telemetry.vehicle_data.Field
	(ChargingState)(0),            // 1: telemetry.vehicle_data.ChargingState
	(ShiftState)(0),               // 2: telemetry.vehicle_data.ShiftState
	(*LocationValue)(nil),         // 3: telemetry.vehicle_data.LocationValue
	(*Value)(nil),                 // 4: telemetry.vehicle_data.Value
	(*Datum)(nil),                 // 5: telemetry.vehicle_data.Datum
	(*Payload)(nil),               // 6: telemetry.vehicle_data.Payload
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_protos_vehicle_data_proto_depIdxs = []int32{
	3, // 0: telemetry.vehicle_data.Value.location_value:type_name -> telemetry.vehicle_data.LocationValue
	1, // 1: telemetry.vehicle_data.Value.charging_value:type_name -> telemetry.vehicle_data.ChargingState
	2, // 2: telemetry.vehicle_data.Value.shift_state_value:type_name -> telemetry.vehicle_data.ShiftState
	0, // 3: telemetry.vehicle_data.Datum.key:type_name -> telemetry.vehicle_data.Field
	4, // 4: telemetry.vehicle_data.Datum.value:type_name -> telemetry.vehicle_data.Value
	5, // 5: telemetry.vehicle_data.Payload.data:type_name -> telemetry.vehicle_data.Datum
	7, // 6: telemetry.vehicle_data.Payload.created_at:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_protos_vehicle_data_proto_init() }
func file_protos_vehicle_data_proto_init() {
	if File_protos_vehicle_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_vehicle_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vehicle_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vehicle_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vehicle_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_vehicle_data_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Value_StringValue)(nil),
		(*Value_IntValue)(nil),
		(*Value_LongValue)(nil),
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_BooleanValue)(nil),
		(*Value_LocationValue)(nil),
		(*Value_ChargingValue)(nil),
		(*Value_ShiftStateValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_vehicle_data_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_vehicle_data_proto_goTypes,
		DependencyIndexes: file_protos_vehicle_data_proto_depIdxs,
		EnumInfos:         file_protos_vehicle_data_proto_enumTypes,
		MessageInfos:      file_protos_vehicle_data_proto_msgTypes,
	}.Build()
	File_protos_vehicle_data_proto = out.File
	file_protos_vehicle_data_proto_rawDesc = nil
	file_protos_vehicle_data_proto_goTypes = nil
	file_protos_vehicle_data_proto_depIdxs = nil
}
