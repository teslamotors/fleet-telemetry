// Code generated by MockGen. DO NOT EDIT.
// Source: protos/data_connector_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source protos/data_connector_service_grpc.pb.go -destination=test/mocks/data_connector_service_grpc.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	protos "github.com/teslamotors/fleet-telemetry/protos"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockVehicleServiceClient is a mock of VehicleServiceClient interface.
type MockVehicleServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleServiceClientMockRecorder
}

// MockVehicleServiceClientMockRecorder is the mock recorder for MockVehicleServiceClient.
type MockVehicleServiceClientMockRecorder struct {
	mock *MockVehicleServiceClient
}

// NewMockVehicleServiceClient creates a new mock instance.
func NewMockVehicleServiceClient(ctrl *gomock.Controller) *MockVehicleServiceClient {
	mock := &MockVehicleServiceClient{ctrl: ctrl}
	mock.recorder = &MockVehicleServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleServiceClient) EXPECT() *MockVehicleServiceClientMockRecorder {
	return m.recorder
}

// VinAllowed mocks base method.
func (m *MockVehicleServiceClient) VinAllowed(ctx context.Context, in *protos.VinAllowedRequest, opts ...grpc.CallOption) (*protos.VinAllowedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VinAllowed", varargs...)
	ret0, _ := ret[0].(*protos.VinAllowedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VinAllowed indicates an expected call of VinAllowed.
func (mr *MockVehicleServiceClientMockRecorder) VinAllowed(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VinAllowed", reflect.TypeOf((*MockVehicleServiceClient)(nil).VinAllowed), varargs...)
}

// MockVehicleServiceServer is a mock of VehicleServiceServer interface.
type MockVehicleServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleServiceServerMockRecorder
}

// MockVehicleServiceServerMockRecorder is the mock recorder for MockVehicleServiceServer.
type MockVehicleServiceServerMockRecorder struct {
	mock *MockVehicleServiceServer
}

// NewMockVehicleServiceServer creates a new mock instance.
func NewMockVehicleServiceServer(ctrl *gomock.Controller) *MockVehicleServiceServer {
	mock := &MockVehicleServiceServer{ctrl: ctrl}
	mock.recorder = &MockVehicleServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleServiceServer) EXPECT() *MockVehicleServiceServerMockRecorder {
	return m.recorder
}

// VinAllowed mocks base method.
func (m *MockVehicleServiceServer) VinAllowed(arg0 context.Context, arg1 *protos.VinAllowedRequest) (*protos.VinAllowedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VinAllowed", arg0, arg1)
	ret0, _ := ret[0].(*protos.VinAllowedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VinAllowed indicates an expected call of VinAllowed.
func (mr *MockVehicleServiceServerMockRecorder) VinAllowed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VinAllowed", reflect.TypeOf((*MockVehicleServiceServer)(nil).VinAllowed), arg0, arg1)
}

// mustEmbedUnimplementedVehicleServiceServer mocks base method.
func (m *MockVehicleServiceServer) mustEmbedUnimplementedVehicleServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVehicleServiceServer")
}

// mustEmbedUnimplementedVehicleServiceServer indicates an expected call of mustEmbedUnimplementedVehicleServiceServer.
func (mr *MockVehicleServiceServerMockRecorder) mustEmbedUnimplementedVehicleServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVehicleServiceServer", reflect.TypeOf((*MockVehicleServiceServer)(nil).mustEmbedUnimplementedVehicleServiceServer))
}

// MockUnsafeVehicleServiceServer is a mock of UnsafeVehicleServiceServer interface.
type MockUnsafeVehicleServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeVehicleServiceServerMockRecorder
}

// MockUnsafeVehicleServiceServerMockRecorder is the mock recorder for MockUnsafeVehicleServiceServer.
type MockUnsafeVehicleServiceServerMockRecorder struct {
	mock *MockUnsafeVehicleServiceServer
}

// NewMockUnsafeVehicleServiceServer creates a new mock instance.
func NewMockUnsafeVehicleServiceServer(ctrl *gomock.Controller) *MockUnsafeVehicleServiceServer {
	mock := &MockUnsafeVehicleServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeVehicleServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeVehicleServiceServer) EXPECT() *MockUnsafeVehicleServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedVehicleServiceServer mocks base method.
func (m *MockUnsafeVehicleServiceServer) mustEmbedUnimplementedVehicleServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVehicleServiceServer")
}

// mustEmbedUnimplementedVehicleServiceServer indicates an expected call of mustEmbedUnimplementedVehicleServiceServer.
func (mr *MockUnsafeVehicleServiceServerMockRecorder) mustEmbedUnimplementedVehicleServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVehicleServiceServer", reflect.TypeOf((*MockUnsafeVehicleServiceServer)(nil).mustEmbedUnimplementedVehicleServiceServer))
}
